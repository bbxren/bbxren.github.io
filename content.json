{"meta":{"title":"我是王文徽","subtitle":"我相信皮格马利翁效应","description":"王文徽,个人博客,记录","author":"Bbxren","url":"http://bbxren.site","root":"/"},"pages":[{"title":"DESIGN","date":"2020-01-18T14:13:08.189Z","updated":"2020-01-18T14:13:08.189Z","comments":false,"path":"gallery/index.html","permalink":"http://bbxren.site/gallery/index.html","excerpt":"","text":"个人设计作品集"},{"title":"分类","date":"2020-01-18T14:13:08.187Z","updated":"2020-01-18T14:13:08.187Z","comments":false,"path":"categories/index.html","permalink":"http://bbxren.site/categories/index.html","excerpt":"","text":""},{"title":"music","date":"2019-12-16T10:13:34.000Z","updated":"2020-01-18T14:13:08.193Z","comments":false,"path":"music/index.html","permalink":"http://bbxren.site/music/index.html","excerpt":"","text":"以下为测试页面音乐，具体页面尚在开发中…以后有空再说…"},{"title":"友情链接","date":"2020-01-18T14:13:08.191Z","updated":"2020-01-18T14:13:08.191Z","comments":true,"path":"link/index.html","permalink":"http://bbxren.site/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-01-18T14:13:08.194Z","updated":"2020-01-18T14:13:08.194Z","comments":false,"path":"tags/index.html","permalink":"http://bbxren.site/tags/index.html","excerpt":"","text":""},{"title":"movies","date":"2019-12-16T10:13:56.000Z","updated":"2020-01-18T14:13:08.192Z","comments":true,"path":"movies/index.html","permalink":"http://bbxren.site/movies/index.html","excerpt":"","text":"以下为测试视频，具体页面尚在开发中…以后有空再说…(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\",\"pic\":\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1576503253580&di=b75f807b0d09d21b17685939aa779c5f&imgtype=0&src=http%3A%2F%2Fa.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2F838ba61ea8d3fd1fa9a85cbd304e251f94ca5f90.jpg\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()"}],"posts":[{"title":"二分查找","slug":"二分法","date":"2020-01-20T11:49:04.000Z","updated":"2020-01-21T14:33:03.774Z","comments":true,"path":"2020/01/20/算法/二分法/","link":"","permalink":"http://bbxren.site/2020/01/20/算法/二分法/","excerpt":"","text":"二分查找比如你要查一个以P打头的通讯录用户，或者R开头的单词，都更适合从中间查找，这种算法就是二分查找。其输入是一个有序的元素列表，查找元素包含在列表中，返回该位置，否则返回null。如果列表包含100个元素，简单查找最多需要100次，二分查找最多只需要7次；如果列表包含40亿个数字，二分查找最多只需要32次，即运行时间为对数时间（log时间）。 大O表示法指出了算法的速度一些常见的大O运行时间： O(log n)，也叫对数时间，这样的算法包括二分查找。 O(n)，也叫线性时间，这样的算法包括简单查找。 O(n * log n)，这样的算法包括快速排序。 O(n²)，选择排序，速度较慢。 O(n!)，例如旅行商问题。简明代码123456789101112int BinarySearch(int len[],int target,int low,int high)while(low &lt;= high)&#123; int mid = low + (high-low) / 2; if (target == len[mid])&#123; return mid; else if (target &lt; len[mid]) high = mid - 1; else low = mid + 1; &#125; return null;&#125; 二分法思想简单，数据量大时算法加速提升速度快，要求待查数据已被整理为有序列表。 注意问题 数据范围：整型范围为-2³¹～2³¹-1，二分查找时如果使用int mid = (high + low) / 2;对于较大的low和high可能相加后超过范围，因此使用int mid = low + (high-low) / 2; 边界确定。边界确定关系到二分查找算法的赋值与判断。如high &gt; low还是high &gt;= low，high = mid还是 high = mid - 1还有high的初值是n还是n-1(n指元素个数)，一旦错误，会导致死循环或者返回错误的情况，应该保持统一的开闭区间，比如high初值为n时，是左闭右开区间[low,high),取子序列也应该是左闭右开区间，while( low&lt; high)，以及high = mid;,子区间序列为[low,mid)，当high初始值为n-1，则与示例代码相同，子区间为[low,mid-1]。3.二分查找的变形，现实问题大多是二分查找的变形，不会是简单的基础模型，例如查找重复出现的元素第一次/最后一次出现的位置，返回小于（大于）或等于目标元素的最大（小）元素等，针对不同问题修改相应的判断和赋值语句，需要注意以下几点： 注意high和low的赋值，保证目标元素必然不在排除序列中。 每次二分过程注意low和high的赋值和循环条件判断，保证不会出现死循环，即要么排除元素序列减少，要么结束循环。 退出循环时，分析此时目标元素形态，确定返回位置的正确表达形式。例题方程求解（POJ 4140）问题描述求下面方程的根：f(x) = x³- 5x²+ 10x - 80 = 0。输出要求精确到小数点后9位。输出样例5.705085930 1234567891011121314151617181920#include &lt;stdio.h&gt;#include &lt;math.h&gt;double BinarySearch(double low, double high) &#123; double mid; double f; while (high - low &gt; 0.00000000001) //精度 &#123; mid = low + (high - low) / 2; f = mid * mid * mid - 5 * mid * mid + 10 * mid - 80; if (f &lt; 0) low = mid; else high = mid; &#125; return mid;&#125;int main()&#123; printf(\"%.9lf\\n\",BinarySearch(0.0,10.0)); return 0;&#125; 在线翻译（POJ 2530）问题描述You have just moved from Waterloo to a big city. The people here speak an incomprehensible dialect of a foreign language. Fortunately, you have a dictionary to help you understand them.输入Input consists of up to 100,000 dictionary entries, followed by a blank line, followed by a message of up to 100,000 words. Each dictionary entry is a line containing an English word, followed by a space and a foreign language word. No foreign word appears more than once in the dictionary. The message is a sequence of words in the foreign language, one word on each line. Each word in the input is a sequence of at most 10 lowercase letters.输出要求Output is the message translated to English, one word per line. Foreign words not in the dictionary should be translated as “eh”.样例输入dog ogdaycat atcaypig igpayfroot ootfrayloops oopslay atcayittenkayoopslay样例输出catehloops 思路由于查找量大，最多可能有100000个，故采用二分法查找词条，这里要注意的是查找的内容为字符串，定义cmp()函数进行排序（sort函数的排序规则），字符串大小比较要用到strcmp()函数，strcmp(a,b)返回小于0的值表示a&lt;b。还要注意输入格式的问题，即如何准确发现空行，可以使用cin.peek()探查输入流的下一个字符。若为换行，结束输入，转入翻译阶段，同时使用cin.peek()前要使用cin.get()处理掉行末换行符,同时排序部分用到了algorithm标准函数库里的sort函数，从网上了解到，sort函数使用的排序方法是类似于快排的方法，时间复杂度为n*log2(n)，执行效率较高！有关sort函数的用法，我参考了这篇文章sort函数有三个参数：（1）第一个是要排序的数组的起始地址。（2）第二个是结束的地址（最后一位要排序的地址）（3）第三个参数是排序的方法，可以是从大到小也可是从小到大，还可以不写第三个参数，此时默认的排序方法是从小到大排序。Sort函数使用模板:Sort(start,end,排序方法)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;using namespace std;struct Entry &#123; char english[11]; char foreign[11];&#125;entries[100005];int Cmp(Entry entry1,Entry entry2) &#123; return strcmp(entry1.foreign, entry2.foreign) &lt; 0; //将字典里的foreign从小到大排列&#125;int main()&#123; int num = 0; char target[11]; while (true) &#123; scanf(\"%s%s\", entries[num].english,entries[num].foreign); num++; cin.get(); if (cin.peek() == '\\n')break; &#125; sort(entries, entries + num, Cmp); while (scanf(\"%s\",target) != EOF) &#123; int low = 0; int n = 0; int high = num; while (low &lt; high) &#123; int mid = low + (high + low) / 2; n = strcmp(entries[mid].foreign, target); if (n &lt; 0) low = mid; else if (n &gt; 0) high = mid; else &#123; printf(\"%s\\n\", entries[mid].english); break; &#125; &#125; if(n)printf(\"en\\n\"); &#125; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://bbxren.site/categories/算法/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://bbxren.site/tags/Algorithm/"}]},{"title":"名片、代金券设计","slug":"名片、代金券设计","date":"2020-01-18T16:54:19.000Z","updated":"2020-01-18T17:39:24.690Z","comments":true,"path":"2020/01/19/设计/名片、代金券设计/","link":"","permalink":"http://bbxren.site/2020/01/19/设计/名片、代金券设计/","excerpt":"","text":"名片、代金券设计名片设计规范 常规名片尺寸: 90MM 54MM特种纸名片尺寸: 90MM 54MM PVC名片尺寸: 88.5MM 57MM 印刷品必须颜色模式: CMYK 分辨率:不低于300!或者450、600 背景大面积黑色色值: C: 30 M: 0 Y: 0 K: 100 背景颜色CMYK色值尽量不要超过250，别太轴，能避免就避免,避免不了就别改了 后工艺必须要矢量图，比如OGO烫金烫印凹凸等工艺LOGO必须是矢量图 透明文件做一面 特种纸名片，最好不要满版印色，容易掉色 字体正常是7号字，最小不要低于6，不然印出来模糊 黑色字体必须是单色黑C: 0 M: 0Y: 0 K: 100 或者90或者80,切记不能四色黑! AI做完图记得转曲，图片一定要嵌入， AI保存JPG一定要导出—— 导出为-JPG(不要导出WEB)，一定要品质最高 常用快捷键 转曲——C S O 文字转化为形状 ——不变形不丢失 编组——C G 取消编组 C S G 视图——勾选智能参考线 没圆角——视图勾选边角构建 对齐——S F7 ——对齐画板——显示选项 置顶：C S ] 置底：C S [ 上锁 C 2 解锁 C A 2 参考线——C R 上锁参考线 ——右键 锁定 安全区——4MM 按工厂 原位复制——C C C F 再置 再次变换 c d 形状生成器 S M ——按住ALT 是减选 [tips]导出之前——多保存一个未转曲的源文件— 导出导出为——勾选JPG ——使用画板—— 品质最高——颜色模式CMYK ——分辨率300——确定 代金券设计规范常用尺寸 180MM 54MM 90MM 165MM 160MM 68MM 35MM 54MM 其他尺寸根据客户要求 代金券工艺 压点线/手撕线/米线/点线/撕线 打单码:00001或者NO:00001打双码:0000001或者NO:0000001(不能正面一个码,背面一个码,必须再一面) 副券宽度根据打码来决定7位数带NO的打码,宽度40mm5位数带NO的打码,宽度30mm(越宽越好,但是也要注意整体比例) 打码字体大小:13号字 打码颜色:黑色红色金色 双码间距左右不小于18MM,上下间距不小于40MM 烫金烫银等工艺一一中文不小于7号,英文不小于9号(字体大小范围超过2 MM的圆形)条粗细不小于0.3MM 常用快捷键 虚线——直线段工具——描边打开——勾选虚线—— 编组快捷键—— C G 取消编组——右键取消 C S G 剪切蒙版——上范围——下效果——同时选中——C 7 （顺序和PS相反） 文字烫金方法1: 上文字 ——下烫金（素材要嵌入）——同时选中C 7——选中转曲 文字烫金方法2: 文字转曲——C 8 （转化为符合路径——多个路径合并成一个路径）——文字上——素材下——同时选中——C 7","categories":[{"name":"设计","slug":"设计","permalink":"http://bbxren.site/categories/设计/"}],"tags":[{"name":"广告设计","slug":"广告设计","permalink":"http://bbxren.site/tags/广告设计/"},{"name":"Design","slug":"Design","permalink":"http://bbxren.site/tags/Design/"}]},{"title":"Quiz 基本语法 及 变量","slug":"pyDay2","date":"2020-01-18T14:13:08.160Z","updated":"2020-01-18T16:42:53.086Z","comments":true,"path":"2020/01/18/Python/pyDay2/","link":"","permalink":"http://bbxren.site/2020/01/18/Python/pyDay2/","excerpt":"","text":"基本语法 及 变量 以下程序哪里错误了, 并给出修改意见1ounces per liter = 28.35 命名错误，可以改为ounces_per_liter 写一个程序读取输入的两个数字，并且把数字加起来，结果输出如下：Please enter the first number:/ &gt;&gt;&gt; 19.2Please enter the second number:/ &gt;&gt;&gt; 3Got it!19.2 + 3 = 22.2first_num = input(“Please enter the first number:\\n&gt;&gt;&gt;”)second_num = input(“Please enter the second number:\\n&gt;&gt;&gt;”)print(first_num,”+”,second_num,”=”,first_num+second_num)123first_num = input(\"Please enter the first number:\\n&gt;&gt;&gt;\")second_num = input(\"Please enter the second number:\\n&gt;&gt;&gt;\")print(first_num,\"+\",second_num,\"=\",float(first_num)+float(second_num)) 判断输出结果123456789101112### Multi-Line Comment ###\"\"\"This is amulti-line comment.\"\"\"​'''This is also amulti-line comment.'''​print(\"This is not a comment.\") 123456print(\"+ and -:\", 1 + 1, 1 - 1, 1 + 2 - 3)print(\"* and /:\", 2 * 3, 5 * 2, 10 / 5, 9 / 3, 2 * 3 * 4 / 6)print(\"+, -, * and /:\", 2 + 3 * 4, 2 * 3 - 4, 4 / 2 - 4, 4 - 2 / 2) # excecute * and / prior to + and -print(\"( and ):\", (2 + 3) * 4, 2 * (3 - 4), 4 / (2 - 4), (4 - 2) / 2) # excecute inside a () firstprint(\"%:\", 9 % 3, 9 % 2, 9 % 4, -8 % 3, -8 % 7)print(\"** calculate the power of a number:\", 2 ** 3, 2 * 2 * 2, 100 ** 0) print(type(2 32)) # same as 2 ^ 32print(type(2 32), type(2 62), type(2 63))print(type(4/2), type(4/3), type(4/8))print(type(1+1))print(type(“1”+”1”))print(type(“1+1”)) ​​​​​如果n是正数，那么 (n//10)%10 请说出一下num1和num2的值分别是多少？ Case 1:num1 = 1num2 = 2num2 = num1num1 = 10Case 2:num1 = 1num2 = 2num1 = num1 + num2Case 3:num1 = 1num2 = 2num2 = num1num1 = num2Case 4:num1 = 1num2 = 2temp = num1num1 = num2num2 = tempCase 5:num1 = 1num2 = 2num1 = num2 4num2 = num1 3 n=1729print(n % 10,n // 10,n % 100,n % 2,-n // 10) import math​x = math.ceil(4.2)print(x)print(math.ceil(1 + 3.8)) a, b, c = 5, 3.2, “Hello”​ x = y = z = “Hello”动手编程利用python计算以下公式: 不要手算 21980 + 9873454950782 - 23409853458 × 43909285 ÷ 52342198434 ÷ 456的余数 ​​​​​​​​一个小学生问题：罐装可乐一罐: 355毫升大瓶可乐一瓶: 2升 你去买了6罐可乐和两大瓶可乐，请用python计算你一共买了多少毫升可乐 ​​​​​​(1) 一个小时有多少秒？这里，请把交互式解释器当作计算器使用，将每分钟的秒数（60）乘以每小时的分钟数（60）得到结果。(2) 将上一个练习得到的结果（每小时的秒数）赋值给名为seconds_per_hour 的变量。(3) 一天有多少秒？用你的seconds_per_hour 变量进行计算。(4) 再次计算每天的秒数，但这一次将结果存储在名为seconds_per_day 的变量中。(5) 用seconds_per_day 除以seconds_per_hour，使用浮点除法（/）。(6) 用seconds_per_day 除以seconds_per_hour，使用整数除法（//） ​​​​​​输入一个数，这个数代表从凌晨0点，过去的分钟数，请计算并输出当前时间 本程序需要输出两个数: 小时(0 ～ 23) ：分钟(0 ～ 59). 例如： 如果，你输入是150, 那么应该是凌晨2:30了，所以你的程序应该输出2:30 ​​​​​​用python表达以下公式：b×(1+r100)n ​​​​a2+c2b⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯√ ​​ 笔记来源： wanmen 排版及修改： Bbxren","categories":[{"name":"Python","slug":"Python","permalink":"http://bbxren.site/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://bbxren.site/tags/Python/"}]},{"title":"关于Hexo搭建博客的心得与搭建笔记","slug":"hexo","date":"2020-01-18T14:13:08.153Z","updated":"2020-01-18T16:44:01.188Z","comments":true,"path":"2020/01/18/博客/hexo/","link":"","permalink":"http://bbxren.site/2020/01/18/博客/hexo/","excerpt":"","text":"#20200119 通过coding实现了多电脑同步更新博客 #20191231 新年快乐，配置了cloudflare，但是不太好用，关于gitpages访问加速，可以考虑出国的方式（滑稽）,当然我也有了新的方案，之后会进行解决。 #20191216 换电脑重新部署，域名过期，博客主题从Next换到Butterfly，之前的评论系统来必力到valine很遗憾导致评论全部丢失了，同时网站的访客数据和部分博客文章也找不到了。 随笔其实好早就搭了博客，却因为比较忙（借口）和一些其他原因（懒）,迟迟未让博客成形，最开始搭的博客也非常难看，现在还是决定再一次重新做人，认真学习，记录下自己成长的历程。虽然很多时候并没有养成一个记笔记、写博客的习惯，可能我更喜欢看到教程就立刻去做，并且享受做完之后的成就感，所以很难一边去截图一边去写笔记。不过还是觉得有这么一个习惯是很不错的，是对自己所学东西的一个审视，可能有的东西你在做的过程中很难注意到一些细节问题，但在做笔记的过程中你就会发现这些细小的，让你迷茫的东西。另外，看着自己的博文在时间线上一点点积累，就像是你给一颗种子一点点浇水、施肥。我期待着它长成参天大树的那一天。 关于Hexo搭建博客的心得与搭建笔记Tips:因为网上已经有了很详细的官方文档与教程，所以省去了很多没有必要的截图，仅作为个人记录日后查看。 Hexo(中文官方网站)是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染（这些美化装饰网页的做法就称之为渲染）. Hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统。 hexo基于node.js,通过npm安装，npm 是 Node.js 平台的默认包管理工具，有了NPM，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包。 通过git bush 进行上传、编辑、部署等功能。 在GitHub上的Github Pages服务可以给我们提供一个静态网页的托管，以便远程浏览我们的博客内容。Github Pages是给开发者建立的私人页面，免费且没有空间流量限制。每个github账号都可以创建一个Github Pages项目，项目的名称必须是username.github.io 通过ssh将GitHub和Hexo进行连接 12$ git config --global user.name \"###\"$ git config --global user.email \"###\" #初次设置git的邮箱和密码 查看用户密码 12$ git config --global user.name$ git config --global user.e-mail 查看本机是否有ssh key 1$ ls -al ~/.ssh 没有时生成 1234567$ ssh-keygen -t rsa -C “###” #SSH 为 Secure Shell 的缩写，提供两种口令或密钥两种验证，ssh-keygen为密钥验证参数说明#-t rsa 指定密钥类型，可用DSA或RSA两种加密算法#-b 密钥长度#-C “ ”提供注释识别密钥，很多人填邮箱 将公钥copy到github 的ssh keys中 测试连接github,注意这里的T要大写 1$ ssh -T git@github.com 在hexo blog项目根目录下里找到_config.yml文件，找到deploy 进行修改 hexo的使用 12345$ hexo init #初始化$ hexo g #生成$ hexo s #启动服务$ hexo d #部署$ hexo clean # 初始化结构如下 .├── _config.yml 网站配置信息├── package.json 应用程序信息├── scaffolds 模板，新建的文章文件中默认填充的内容├── source 存放用户资源├ ├── _drafts├ └── _posts└── themes 可以通过一些主题对博客进行美化，以及添加其他功能，如站点统计等。 购买域名 购买域名后，进入阿里云的管理控制台-域名与网站-域名就可以看到购买的域名此时的域名状态是未实名认证的， 实名认证 3.域名解析 通过 DNS域名解析将购买的域名指向 github 的二级域名：bbxren.github.io，进入阿里云的管理控制台-域名与网站-云解析 DNS，进入域名的解析设置，点击确定就 OK 了。填完以后的解析列表会出现： ,在这里为了方便选择了CNAME型而不是A，记录值就是自己 github 的二级域名。 设置CNAME在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。 在 github 上面，打开bbxren.github.io 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名，不用添加 http:// 配置完成，等待后就可以访问了。","categories":[{"name":"博客","slug":"博客","permalink":"http://bbxren.site/categories/博客/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://bbxren.site/tags/hexo/"}]},{"title":"蓝桥杯习题练习入门训练 C语言版","slug":"bluebr1","date":"2020-01-18T14:13:08.151Z","updated":"2020-01-18T16:47:20.867Z","comments":true,"path":"2020/01/18/null/bluebr1/","link":"","permalink":"http://bbxren.site/2020/01/18/null/bluebr1/","excerpt":"","text":"入门训练 1.问题描述Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。输入格式输入包含一个整数n。输出格式输出一行，包含一个整数，表示Fn除以10007的余数。说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。样例输入10样例输出55样例输入22样例输出7704数据规模与约定1 &lt;= n &lt;= 1,000,000。12345678910111213141516171819#include&lt;stdlib.h&gt;#include&lt;stdio.h&gt;#define max 1000001#define mod 10007int i,n,F[max];int main()&#123; F[1] = 1; F[2] = 1; scanf(\"%d\", &amp;n); for ( i = 3; i &lt;= n; ++i) //踩坑，gcc基于C98，不支持在for循环中定义变量 &#123; F[i]=(F[i-1]+F[i-2]) % mod; &#125; printf(\"%d\",F[n]); return 0;&#125; 2.问题描述给定圆的半径r，求圆的面积。输入格式输入包含一个整数r，表示圆的半径。输出格式输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。说明：在本题中，输入是一个整数，但是输出是一个实数。对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。样例输入4样例输出50.2654825数据规模与约定1 &lt;= r &lt;= 10000。提示本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。1234567891011#include&lt;stdio.h&gt;#define PI 3.14159265358979323int main()&#123; int r; double s; scanf(\"%d\", &amp;r); s = PI * r * r; printf(\"%.7lf\", s); return 0;&#125; 3.问题描述求1+2+3+…+n的值。输入格式输入包括一个整数n。输出格式输出一行，包括一个整数，表示1+2+3+…+n的值。样例输入4样例输出10样例输入100说明：有一些试题会给出多组样例输入输出以帮助你更好的做题。一般在提交之前所有这些样例都需要测试通过才行，但这不代表这几组样例数据都正确了你的程序就是完全正确的，潜在的错误可能仍然导致你的得分较低。样例输出5050数据规模与约定1 &lt;= n &lt;= 1,000,000,000。说明：请注意这里的数据规模。本题直接的想法是直接使用一个循环来累加，然而，当数据规模很大时，这种“暴力”的方法往往会导致超时。此时你需要想想其他方法。你可以试一试，如果使用1000000000作为你的程序的输入，你的程序是不是能在规定的上面规定的时限内运行出来。本题另一个要值得注意的地方是答案的大小不在你的语言默认的整型(int)范围内，如果使用整型来保存结果，会导致结果错误。如果你使用C++或C语言而且准备使用printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数。12345678910#include&lt;stdio.h&gt;int main()&#123;int n;long long temp;scanf(\"%d\", &amp;n);temp = n;printf(\"%I64d\",(1+temp)*temp/2); return 0;&#125; 4.问题描述输入A、B，输出A+B。说明：在“问题描述”这部分，会给出试题的意思，以及所要求的目标。输入格式输入的第一行包括两个整数，由空格分隔，分别表示A、B。说明：“输入格式”是描述在测试你的程序时，所给的输入一定满足的格式。做题时你应该假设所给的输入是一定满足输入格式的要求的，所以你不需要对输入的格式进行检查。多余的格式检查可能会适得其反，使用你的程序错误。在测试的时候，系统会自动将输入数据输入到你的程序中，你不能给任何提示。比如，你在输入的时候提示“请输入A、B”之类的话是不需要的，这些多余的输出会使得你的程序被判定为错误。输出格式输出一行，包括一个整数，表示A+B的值。说明：“输出格式”是要求你的程序在输出结果的时候必须满足的格式。在输出时，你的程序必须满足这个格式的要求，不能少任何内容，也不能多任何内容。如果你的内容和输出格式要求的不一样，你的程序会被判断为错误，包括你输出了提示信息、中间调试信息、计时或者统计的信息等。样例输入12 45说明：“样例输入”给出了一组满足“输入格式”要求的输入的例子。这里给出的输入只是可能用来测试你的程序的一个输入，在测试的时候，还会有更多的输入用来测试你的程序。样例输出57说明：“样例输出”给出了一组满足“输出格式”要求的输出的例子。样例输出中的结果是和样例输入中的是对应的，因此，你可以使用样例的输入输出简单的检查你的程序。要特别指出的是，能够通过样例输入输出的程序并不一定是正确的程序，在测试的时候，会用很多组数据进行测试，而不局限于样例数据。有可能一个程序通过了样例数据，但测试的时候仍只能得0分，可能因为这个程序只在一些类似样例的特例中正确，而不具有通用性，再测试更多数据时会出现错误。比如，对于本题，如果你写一个程序不管输入是什么都输入57，则样例数据是对的，但是测试其他数据，哪怕输入是1和2，这个程序也输出57，则对于其他数据这个程序都不正确。数据规模与约定-10000 &lt;= A, B &lt;= 10000。说明：“数据规模与约定”中给出了试题中主要参数的范围。这个范围对于解题非常重要，不同的数据范围会导致试题需要使用不同的解法来解决。比如本题中给的A、B范围不大，可以使用整型(int)来保存，如果范围更大，超过int的范围，则要考虑其他方法来保存大数。有一些范围在方便的时候是在“问题描述”中直接给的，所以在做题时不仅要看这个范围，还要注意问题描述。123456789#include &lt;stdio.h&gt; int main()&#123; int a, b; scanf(\"%d%d\", &amp;a, &amp;b); printf(\"%d\", a+b); return 0;&#125; 感谢http://www.cnblogs.com/Ambrose/p/4311799.html","categories":[],"tags":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"http://bbxren.site/tags/蓝桥杯/"}]},{"title":"给博客通过CDN实现访问加速？——Cloudflare","slug":"给博客通过CDN实现访问加速？——Cloudflare","date":"2019-12-31T15:26:18.000Z","updated":"2020-01-18T14:13:08.185Z","comments":true,"path":"2019/12/31/博客/给博客通过CDN实现访问加速？——Cloudflare/","link":"","permalink":"http://bbxren.site/2019/12/31/博客/给博客通过CDN实现访问加速？——Cloudflare/","excerpt":"","text":"给博客通过CDN实现访问加速？——CloudflareCDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。就跟物流中心一样，哪里离你近就给你从哪发货。 Cloudflare 以向客户提供网站安全管理、性能优化及相关的技术支持为主要业务。提供包括CDN、优化工具、安全、分析以及应用等服务。并且与百度有合作，国内部署有大量的节点，以及处理 GitHub Pages 的问题。 注册账号 注册好后点击 Add site添加域名 这里我遇到了提示域名未注册的问题导致无法添加，经过测试是DNS解析的问题，我把记录值从域名变成A类型的IP地址得以解决 等待解析完成后continue 然后他会让你修改DNS服务器，我的是阿里云域名控制台，阿里云的DNS服务器修改如图，修改完成，等待一段时间后生效。bbxren.site is now queued up to be re-checked. Please check back in a few hours. You’ll also be notified by email once your site becomes active. 你也可以通过WHOIS查看自己的网站信息判断是否修改成功。 （不过这个方案可能GG了） whois之后我又发现好像这两篇文章的博主并没有用Cloudflare（？？？），另一个使用了的速度和gitpages没什么区别（可能是因为内陆节点的问题），不过解决了百度抓取的问题，还有考虑到浏览器缓存问题，等我的DNS服务器check完后会再进一步测试，至于部署到coding，gitee等其他方案等因为不稳定原因直接pass了，可能会考虑jsDelivr或者备案后打包到七牛吧。 还有就是hexo的编译速度可能会出现变慢的情况，后续（审美疲劳）的时候会考虑换成Hugo，据说是目前世界第一快的（滑稽），由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。 然后最近会解决考虑安全性下多台电脑和手机编写博客的问题。 参考文章1 参考文章2 使用了cloudflare的博客","categories":[{"name":"博客","slug":"博客","permalink":"http://bbxren.site/categories/博客/"}],"tags":[{"name":"CDN","slug":"CDN","permalink":"http://bbxren.site/tags/CDN/"}]},{"title":"读《时生》有感","slug":"读《时生》有感","date":"2019-12-30T15:13:59.000Z","updated":"2020-01-18T14:13:08.186Z","comments":true,"path":"2019/12/30/随笔/读《时生》有感/","link":"","permalink":"http://bbxren.site/2019/12/30/随笔/读《时生》有感/","excerpt":"","text":"读《时生》有感东野圭吾的书总是很容易看完，不像《国富论》之类的或者一些晦涩的工具书，一本书看一年也看不完。但它又区别于迎合市场的商业爽文，看的过程中总会有一些思考和感悟，无论是一些看书过程中结合自己经历想到的零零碎碎的看法，还是看完之后长舒一口气的了然，都让人说不出滋味。 我觉得能让人思考的书就是好书，《时生》亦是如此。 我并不想写这本书的概括，只想随便写写读书的感悟，想到哪里就写到哪里好了。 “不是你的错”，从拓实嘴里对妈妈说出这句话的时候，也意味着他真正的改变了，那个暴躁没耐心、爱逞强、爱虚张声势的男人形象不再了。在这个过程里，我也会对拓实的不可救药感到气愤，如果遇见这样的人，还不如丢下他让他自生自灭吧，时生也会对这样的父亲感到无奈吧，可毕竟是亲人啊。其实我自己也是这样的，如果当初再努力一点就好了，未来的我或许会这么说吧，父母也经常告诫我要好好学习，可现在的我却并没有那么努力，甚至在走向麻木，人总是要学着去改变的啊。拓实一出生并没有一手好牌，他自己也让整个局势变得更糟了，一味的逃避，一再的不上进，直到千鹤的离开，失去的不会再回来，重逢时也不会有如果。好在他遇到了时生，遇到了竹美和杰西，结局并不一定会完美，无论哪一刻，只有未来。 对于石原或是冈部或是日吉这样的小人物，他们不是普通人，只能算作棋子吧，面对政客与商豪，在某些时候被抛出去，或者被抛弃。我的想法很复杂，我也没有办法去描写他们的感受，可能就像是面对苦难将至时的绝望感与无力感，或者早已麻木，连感受也没有了。从这个角度来看，拓实是幸运的，我也是幸运的，时代是磅大的，我们是渺小的。听过蝴蝶效应吗？一旦放弃了，就真的什么希望也没有了。 “确信自己喜欢的人能好好地活着，即便面对死亡，也看到了未来。人无论在什么时候都会感受到未来。无论是怎样短暂的一个瞬间，只要有活着的感觉，就是未来。我告诉你，未来不仅仅是明天。未来在人心中。只要心中有未来，人就能幸福起来。” 时生，时间的时，生命的生。生命太过于庄重，时间太过于抽象。对于时间最美的意义便是生命，对于生命最美的意义便是来过。未来，我在花屋敷等你。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://bbxren.site/categories/随笔/"}],"tags":[{"name":"读书","slug":"读书","permalink":"http://bbxren.site/tags/读书/"}]},{"title":"数据仓库与数据挖掘概述","slug":"数据仓库与数据挖掘概述","date":"2019-12-26T23:28:05.000Z","updated":"2020-01-18T14:13:08.166Z","comments":true,"path":"2019/12/27/数据挖掘/数据仓库与数据挖掘概述/","link":"","permalink":"http://bbxren.site/2019/12/27/数据挖掘/数据仓库与数据挖掘概述/","excerpt":"","text":"数据仓库与数据挖掘概述数据挖掘这学期选了数据仓库与数据挖掘概论，上课比较混，没怎么学到东西，下面做一个学习总结。 数据挖掘主要应用于物联网 The Internet of Things、云计算 Cloud Computing以及大数据 Big Data 数据挖掘来源于于机器学习和知识工程，其中涉及到很多专业名词，我并没有相关的实践经验，也了解的不是很清楚，总的来说，数据挖掘就是从大量的、不完全的、有噪声的、模糊的、随机的数据中，提取隐含在其中的、人们事先不知道的、但又是潜在有用的信息和知识的过程，就是从数据中挖掘知识。 其中数据来源可以是结构化的，比如关系数据库中的数据，也可以是半结构化的文本、图形、图像数据等。 数据挖掘步骤 整个过程还是清晰明了的（JIAWEI HAN） 数据清理(Data Cleaning):消除噪声或不一致数据； 数据集成(Data Integration):多种数据源组合在一起； 数据选择(Data Selection):从数据库中检索与分析任务相关的数据； 数据变换(Data Transformation):数据变换或统一成适合挖掘的形式，如通过汇总或聚集操作； 数据挖掘(Data Mining):使用智能方法提取数据模式； 模式评估(Data Evaluation):根据某种兴趣度度量，识别表示知识的真正有趣的模式； 知识表示(Knowledge presentation)：使用可视化和知识表示技术，向用户提供挖掘的知识； 数据挖掘的功能关联分析 •若两个或多个变量间存在着某种规律性，称为关联 •分简单关联、时序关联、因果关联 •从大量的数据中发现项集之间有趣的联系、相关关系或因果结构，以及项集的频繁模式 比如啤酒与尿布 分类与预测 •分类：提出一个分类函数或者分类模型，该模型能把数据库中的数据项映射到给定的类别中的一个。 •需要有一个训练样本数据集作为输入 •预测：利用历史数据建立模型，再运用最新数据作为输入值，获得未来变化的趋势或者评估给定样本可能具有的属性或值的范围。 比如决策树、K-最临近分类法 聚类分析 偏差分析 数据仓库数据仓库是面向主题的、集成的、具有时间特征的、稳定的数据集合，用以支持经营管理中的决策制定过程。 我的理解就是数据仓库为数据挖掘所服务，给数据挖掘提供更好的数据源以及更好的平台和便利性。 反正看了一大堆应用案例，数据挖掘对用户行为的分析等十分有效，也是让机器更了解人类使用习惯的过程，我觉得这之中良好的数据源和Data Mining的方法至关重要。 基本特征 数据是面向主题的 就是说，和面向于应用的传统数据库，数据仓库以主题为核心，你要挖掘要分析，必须有一个对象和主题，并且丢弃了不必要的信息，和数据库来比较，我觉得它太智能了，并且有很高的商业价值，另外，数据仓库仍是采用关系数据库技术来实现，即数据仓库的数据最终也表现为关系。 数据是集成的 统一源数据（命名，编码、单位等） 综合与计算（年月日时…) 数据是不可更新的 仅提供查询 数据是随时间不断变化的 增加新内容，删除旧内容 体系结构 信息获取层 收集、提取、净化、聚合 信息存储层 保存 信息传递层 报表 图表 又称展示层、应用层 数据仓库中的数据分为多个级别 数据仓库中存在的不同综合级别，称其为粒度（granularity） 粒度 指数据仓库的数据单位中保存数据细化或综合程度的级别 粒度影响存放在数据仓库中的数据量的大小，同时影响数据仓库所能回答查询问题的细节程度和响应速度，就是说这个数据有没有细节，够不够细 冗余 元数据 关于数据的数据 如传统数据库中的数据字典 可对数据仓库中的各种数据进行详细的描述与说明，说明每个数据的上下文关系，使每个数据具有符合现实的真实含义，使最终用户了解这些数据之间的关系 方便数据仓库的组织、检索和加载 分割问题 将数据分散到各自的物理单元中，以便能独立处理，以提高数据处理效率 数据分割后的数据单元称为分片 将具有相关性的数据组织在一起，就会提高效率 如某一时间，某一时段的数据，某一地区的数据，特定业务领域的数据 分割的标准 •时间 •商业领域 •地理位置 •组织单位 分割的优越性 •容易重构 •自由索引 •顺序扫描 •容易恢复 •容易监控 分割的层次 •分为系统层和应用层 •系统层的分割由数据库管理系统和操作系统完成 •应用层的分割由应用程序完成，在应用层上的分割更有意义——DM 数据组织形式 简单堆积结构 就是每天往后加数据 轮转综合结构 就是分年月周日级别，每天加数据，到下一个级别汇总覆盖低级数据 简单直接结构 就是我想什么时候加数据就什么时候加，一周一次，一月一次都行 连续结构 通过两个或更多连续的简单直接结构数据组织形式的文件，可以生成另一种连续结构数据组织形式的文件，就比如一个等差数列和另一个等差数列合成一个等差数列 数据模型 数据模型是对现实世界进行抽象的工具 抽象的程度不同，就形成不同抽象级别层次上的数据模型 与数据库的数据模型区别 不包含纯操作型的数据 增加了时间属性作为码结构的一部分 增加了一些导出数据 分三级 概念 常用E-R图进行表示 •矩形：表示实体/主题 •椭圆形：表示主题的属性 •菱形：表示主题之间的关系 •无向边：主题与属性，菱形与主题，菱形与属性等 逻辑 用关系模型 •关系：一个二维表 •元组：表中的一行 •属性：表中的一列 •主码：表中的某个属性组，其值唯一地标识一个元组 •域：属性的取值范围 •分量：元组中的一个属性组 •关系模式：对关系的描述 –关系名（属性名1，属性名2，…属性名n） 物理 •逻辑数据模型在数据仓库中的实现 •如物理存取方式、数据存放位置、存储分配等 •需要考虑I/O存取时间，空间利用率和维护代价等 •考虑到数据仓库的数据量大但是操作单一的特点，可采取其他一些提高数据仓库性能的技术 ​ •合并表 ​ •建立数据序列 ​ •引入冗余 ​ •进一步细分数据 ​ •生成导出数据 ​ •建立广义索引等 数据仓库的设计步骤数据仓库的设计是数据驱动的 原型法：从构建系统简单的基本框架着手，不断丰富与完善整个系统 分为以下几个步骤 概念模型设计 技术准备工作 逻辑模型设计 物理模型设计 数据仓库生成 数据仓库运行与维护","categories":[{"name":"数据挖掘","slug":"数据挖掘","permalink":"http://bbxren.site/categories/数据挖掘/"}],"tags":[{"name":"数据挖掘","slug":"数据挖掘","permalink":"http://bbxren.site/tags/数据挖掘/"}]},{"title":"Apriori算法","slug":"Apriori算法","date":"2019-12-26T13:40:08.000Z","updated":"2020-01-18T14:13:08.131Z","comments":true,"path":"2019/12/26/算法/Apriori算法/","link":"","permalink":"http://bbxren.site/2019/12/26/算法/Apriori算法/","excerpt":"","text":"Apriori算法 Apriori性质： 频繁项集的所有非空子集也都必须是频繁的 这是频繁项集的先验知识 可以减少候选频繁项集的数量 Step1：通过迭代，检索出源数据中的所有频繁项集，即支持度不低于用户设定阈值的项集 Step2：利用第一步检索出的频繁项集构造出满足用户最小置信度的规则 产生频繁项集算法 ①k=1 ②由(k-1)项集产生候选k-项集 ③依据Apriori性质，对候选k-项集进行剪枝 ④扫描数据库，统计各个项目的出现次数 ⑤依据最小支持度，由候选k-项集中产生频繁k-项集 ⑥K=k+1 ⑦转②,直到k=n为止 约定 •Ck：第k次迭代产生的候选项集为候选k项集 •Lk：第k次迭代产生的频繁项集为频繁k项集 求频繁1项集L1 以项目集合I作为候选1项集C1，扫描数据库1次，统计各个项目的出现次数，根据设定的最小支持度得出频繁1项集L1 求频繁k+1项集Lk+1 ​ 对前k-1个项目相同的每两个k频繁模式执行join操作，得到候选k+1项集Ck+1 ​ 根据Apriori性质，对Ck+1进行剪枝 扫描数据库一遍，确定每个c∈Ck+1的支持计数，据此得出频繁k+1项集Lk+1 分析 •每产生第K级的频繁项集，需要扫描数据库1次(计算支持度) •如何从k频繁项集得到候选k+1项集？ –{a,b}+{a,c}=&gt;{a,b,c} –{a,b}+{b,c}=&gt;{} •通过k次迭代，可以产生长度从1到k的所有频繁项集 示例看概念看得头痛，来个例子就很简单了，如下： 数据库 •D 事务 •T 项目 •{I1}、 {I2}、 {I3}、 {I4}、 {I5} 项目集合 •I={I1，I2，I3，I4，I5} 用户要求的最小支持度阈值 •s=20% 规则置信度 c=60% 这就是第一次迭代，产生频繁1-项集，说白了就是数次数 然后是第二次迭代，产生频繁2-项集，得出{I4,I5}不是频繁2-项集 再进行第三次迭代，产生频繁3-项集，得到要求结果。 分析 先进行Apriori剪枝，再通过支持度删除 负边界：所有非频繁，但符合Apriori性质的候选项集的集合 负边界中的项集是非频繁的，但每个项集的所有子集都是频繁的 负边界在改进算法中更为重要 从频繁项集产生关联规则 计算每一个频繁项集的子集 如{I1，I2，I5} ​ {I1，I2}和{I5} ​ {I1，I5}和{I2} ​ {I2，I5}和{I1} 得到规则 {I1，I2} →I5 {I1，I5} →I2 {I2，I5} →I1 计算规则的置信度 比如c({I1，I2} →I5)=s({I1，I2，I5}/s{I1，I2} )=2/3 4.置信度c大于给定的阈值的规则为强关联规则 分析 如何拆分并产生频繁项集的子集？ {a,b,c,d} {a,b,c} →d {a} →{b,c,d} ? {a,b} →{c,d} ? 并不是所有被挖掘出的强关联规则都有意义","categories":[{"name":"算法","slug":"算法","permalink":"http://bbxren.site/categories/算法/"}],"tags":[{"name":"关联规则","slug":"关联规则","permalink":"http://bbxren.site/tags/关联规则/"},{"name":"数据挖掘","slug":"数据挖掘","permalink":"http://bbxren.site/tags/数据挖掘/"},{"name":"算法","slug":"算法","permalink":"http://bbxren.site/tags/算法/"}]},{"title":"Python First Day","slug":"pyDay1","date":"2018-11-02T02:56:27.000Z","updated":"2020-01-18T16:42:41.572Z","comments":true,"path":"2018/11/02/Python/pyDay1/","link":"","permalink":"http://bbxren.site/2018/11/02/Python/pyDay1/","excerpt":"","text":"anaconda中python版本的切换，我这里因为要用到3.6版本，当前版本为3.7 conda creativate –name newpy36 python=3.6 # 安装python3.6安装对应python的虚拟环境的时候会自动安装一些依赖库，输入y安装完成后通过activate 进行激活activate newpy36通过deactivate 进行脱出deactivate Print(“hello world”)1print(\"Hello World! 你好,世界! Hola mundo!\"); Hello World! 你好,世界! Hola mundo!12print(\"Hello World!\")print(\"Hello Again\") Hello World!Hello Again1234print(\"This is the 3rd line, \\n\", \"and this is also the 3rd line.\")This is the 3rd line, and this is also the 3rd line. 12print(\"This is the 3rd line, \\and this is also the 3rd line.\") This is the 3rd line, and this is also the 3rd line. GrammerExpression -&gt; Expression Operator Expression Expression -&gt; Number Operator -&gt; +, - , * , / Number -&gt; 0,1,2,3,4 12print(4-5)-1 1print(8 + ) File ““, line 1 print(8 + ) ^SyntaxError: invalid syntax 刘翔能跑多快？110米跨栏，13秒， 速度= 100米/13秒 1110/12.97 8.481110254433307 SyntaxPEP8naming public int numberOfCars = 34; # Java const numberOfCars = 34; # JavaScript 1number_of_cars = 34 # Python 12345# there is no &#123; &#125; and there is no ;x = 6if x &lt; 7: print(x)​ 612if x &lt; 7: print(\"x is smaller than 7\") x is smaller than 7 Semantics12345x = 8if x &lt; 7: print(\"x is smaller than 7\") ​ print(\"x is bigger than 7\")​ Variable, Names, and ObjectsIn Python, everything is implemented as an object. ObjectWe will come back to what an object is later when we talk about Object Oriented Programming. For now, you may just think an object as a box that contains a piece of data. TypeType defines what operations can be done on an object (data). For example, we know that numbers can be added together. VariableVariable and Value变量 和 值 12345speed_of_liuxiang=110/12.97distance= 1000time = distance/speed_of_liuxiangprint(time)print(time/60) 117.90909090909091.965151515151515 Assign New Value, MutableThis is how we define variables in Python.In Python, variables are just names. Assignment does not copy a value; it just attaches a name to the object that contains the data. The name is a reference to a thing rather than the thing itself. Think of a name as a sticky note. 1234speed_of_joshua=110/10time = distance/speed_of_joshuaprint(time)​ 90.9090909090909123time = time-10print(time)80.9090909090909 Data TypeIn this notebook, you will learn the concept of Variabels, Names and Object. And also 4 built-in data types in Python: Integer (int) Float (float) Boolean (bool) String (str) Integers1123 123105 File ““, line 1 05 ^SyntaxError: invalid token 1123,456,789 (123, 456, 789) ###Integer OperationsTips: You may use print(variable) to print the value of variables in Python3, no matter what type of vairbale it is. Also, print(var1, var2) will print out the value of var1 and var2, separated by a white space.In REPL, the result of the last operations will be printed out automatically11 + 2 3123a = 5a += 2a 7123a = 5a = a - 3a 19 // 5 119 % 5 4优先权 12 + 3 * 4 14 How Big Is an int?In Python2, the size of an int was limited to 32 bits, which is enough to store an integer from -2,147,483,648 to 2,147,483,647. A long can store 64 bits. Integers larger than the range will cause Integer Overflow. In case you wonder where does this range come from. Computers store numbers in its binary format, 32 bits means we have 32 binary bits to store a number. That’s why we can only store 232 different integers. Since we want to store both positive numbers and negative numbers at the same time, each side will get 231 numbers, which is 2,147,483,648. In Python3, an int can handle any integer no matter how large it is without causing overflow. 12a = 10**20a 100000000000000000000 1a*a 10000000000000000000000000000000000000000110 1010b10 210o10 810x10 16 Float12 a = 98.5type(a) float Tip:You may use type(variable) to get the type of an variable. For example, type(1) will return int.You an also use scientific notations: 19.8125e2 981.25 Math FunctionsPython also provides a lot of useful math functions, included in math package. To use them, you’ll have to import math first. It’s ok if you don’t understand what is a package or what does import mean here. We will cover this later when we talk about Modules and Packages. 123import mathprint(math.pi)print(math.e) 3.1415926535897932.718281828459045123print(math.floor(98.6))print(math.ceil(98.6))#向下取整，向上取整 989912print(math.pow(2, 3)) #Tip: math.pow always return a float.print(2**3) 8.081math.sqrt(25) 5.0 Boolean1type(1 &lt; 2) bool1(2 &lt; 1) or (1 &lt; 2) true1not (2 &lt; 1) true12a = (2 &lt; 1) and (1 &lt; 2)a false1type(a) false12a = (2 == 1)a false12a = (2 != 1)a true StringsStrings are our first example of Python sequence. It is a sequence of characters.12s = 'this is a string'type(s) str12\"this is also a string\"\"I'm a string\" “this is also a string”“I’m a string”1234# He said:\"I'm a string\"# escapes = \"He said: \\\"I'm a string\\\"\"print(s) He said: “I’m a string”12long_s = \"You can put a long string that \\ntakes up multiple lines here\"print(long_s) You can put a long string thattakes up multiple lines here12345s = '''This is the first line This is the second line'''print(s) This is the first line This is the second line Type Conversions123a = str(98.6)atype(a) str1str(True) ‘True’1float('98.6') 98.61int('-123') -123 If you mix different numeric types, Ptyhon will try to do the conversion for you. However, you cannot mix string with numbers, unless the operation make sense (string combination &amp; duplicate). 11 + 2.0 3.0 1True + 3 413.88+\"28\" TypeError Traceback (most recent call last) in ()—-&gt; 1 3.88+”28” TypeError: unsupported operand type(s) for +: ‘float’ and ‘str’ 1234print(int(3.88) + int(\"28\")) print(int(-2.95) + int(\"28\"))print(float(3) + float(\"28\")) print(str(3.88) + str(28)) 312631.03.8828 Combine &amp; Duplicate1234template = \"My name is\"name = \"Joshua\"greeting = template + \" \" + name + \".\"print(greeting) My name is Joshua.12laugh = 3 * \"Ha \"print(laugh) Ha Ha Ha Extract &amp;Slice123letters = \"abcdefghijklmnopqrstuvwxyz\"letters[0 ]'a' 123456789letters = \"我爱北京天安门\"letters[25]---------------------------------------------------------------------------IndexError Traceback (most recent call last)&lt;ipython-input-199-3d4ad1959dec&gt; in &lt;module&gt;()----&gt; 1 letters[25]IndexError: string index out of range 12letters[-5]'北' You can extract a substring from a string by using slice. Format: [start:end:step] [:] extracts the all string[start:] from start to the end[:end] from the beginning to the end - 1 offset[start:end] from start to end - 1[start:end:step] from start to end - 1, skipping characters by step[:] extracts the all string 1letters[:] ‘我爱北京天安门’[start:] from start to the end1letters[2:] ‘北京天安门’1letters[-3:] ‘天安门’[:end] from the beginning to the end - 1 offset1letters[:5] ‘我爱北京天’1letters[:100] ‘我爱北京天安门’[start:end] from start to end - 11letters[2:5] ‘北京天’1letters[-6:-2] ‘爱北京天’1letters[-2:-6] ‘’[start:end:step] from start to end - 1, skipping characters by step12#步长（间隔）letters[1:5:2] ‘爱京’1letters[::7] ‘我’1letters[::-1] ‘门安天京北爱我’ ### Get Length1len(letters) 7 Split &amp; Join123#以逗号切分lan = \"python ruby c c++ swift\"lan.split() [‘python’, ‘ruby’, ‘c’, ‘c++’, ‘swift’]12todos = \"download python, install, download ide, learn\"todos.split(', ') [‘download python’, ‘install’, ‘download ide’, ‘learn’]1'###'.join(['download python', 'install', 'download ide', 'learn']) ‘download python###install###download ide###learn’ Substitue #居中居左排版12s = 'I like C. I like C++. I like Python's.replace('like', 'hate') ‘I hate C. I hate C++. I hate Python’1s.replace('like', 'hate', 1) ‘I hate C. I like C++. I like Python’ Layout12align = 'Learn how to align'align.center(30) ‘ Learn how to align ‘1align.ljust(30) ‘Learn how to align ‘1align.rjust(30) ‘ Learn how to align’1234#chars -- 移除字符串头尾指定的字符序列。#str.strip([chars]);ralign = align.rjust(30)ralign.strip() ‘Learn how to align’ Other useful tools12py_desc = \"Python description: Python is a programming language that lets you work quickly and integrate systems more effectively.\"py_desc.startswith('Python') True1py_desc.endswith('effectively.') True12py_desc.find('language') #找到language的起始位置​ 441py_desc.isalnum() False1py_desc.count(\"Python\") # 出现次数 21py_desc.strip('.') ‘Python description: Python is a programming language that lets you work quickly and integrate systems more effectively’1py_desc.upper() ‘PYTHON DESCRIPTION: PYTHON IS A PROGRAMMING LANGUAGE THAT LETS YOU WORK QUICKLY AND INTEGRATE SYSTEMS MORE EFFECTIVELY.’1py_desc.title() ‘Python Description: Python Is A Programming Language That Lets You Work Quickly And Integrate Systems More Effectively.’ in and out~~12345### Read user input ###age = input(\"How old are you?\")height = input(\"How tall are you?\")weight = input(\"How much do you weigh?\")​print(\"So, you're %s old, %s tall and %s heavy.\" % (age, height, weight)) How old are you?10How tall are you?20How much do you weigh?30So, you’re 10 old, 20 tall and 30 heavy.12345### Read user input ###age = input(\"How old are you?\\n\")height = input(\"How tall are you?\\n\")weight = input(\"How much do you weigh?\\n\")​print(\"So, you're %s yers old, %s meters tall and %s kg heavy.\" % (age, height, weight)) How old are you?10How tall are you?20How much do you weigh?30So, you’re 10 yers old, 20 meters tall and 30 kg heavy.字符串格式输出:https://pyformat.info/#string_pad_alignhttps://dbader.org/blog/python-string-formattinghttps://docs.python.org/3.6/library/string.html New Style in Python 3.61234print('%s %s' % ('one', 'two'))print('&#123;&#125; &#123;&#125;'.format('one', 'two'))print('%d %d' % (1, 2))print('&#123;&#125; &#123;&#125;'.format(1, 2)) one twoone two1 21 21print('&#123;1&#125; &#123;0&#125;'.format('one', 'two')) two one123a = 5b = 10print(f'Five plus ten is &#123;a + b&#125; and not &#123;2 * (a + b)&#125;.') Five plus ten is 15 and not 30.123name = \"Joshua\"question = \"hello\"print(f\"Hello, &#123;name&#125;! How's it &#123;question&#125;?\") Hello, Joshua! How’s it hello? 小白容易踩的坑 excepted an indented block 1.使用IF条件时需要注意缩进，Python中没有分号，通过缩进来表示上下级从属关系。2.冒号后面需要写上一定内容 笔记来源： wanmen 排版及修改： Bbxren","categories":[{"name":"Python","slug":"Python","permalink":"http://bbxren.site/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://bbxren.site/tags/Python/"}]}]}
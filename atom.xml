<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我是王文徽</title>
  
  <subtitle>我相信皮格马利翁效应</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bbxren.site/"/>
  <updated>2020-09-04T13:46:06.452Z</updated>
  <id>http://bbxren.site/</id>
  
  <author>
    <name>Bbxren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给博客通过CDN实现访问加速？——Cloudflare</title>
    <link href="http://bbxren.site/2020/05/30/%E5%8D%9A%E5%AE%A2/%E7%BB%99%E5%8D%9A%E5%AE%A2%E9%80%9A%E8%BF%87CDN%E5%AE%9E%E7%8E%B0%E8%AE%BF%E9%97%AE%E5%8A%A0%E9%80%9F%EF%BC%9F%E2%80%94%E2%80%94Cloudflare/"/>
    <id>http://bbxren.site/2020/05/30/博客/给博客通过CDN实现访问加速？——Cloudflare/</id>
    <published>2020-05-30T15:26:18.000Z</published>
    <updated>2020-09-04T13:46:06.452Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="给博客通过CDN实现访问加速？——Cloudflare"><a href="#给博客通过CDN实现访问加速？——Cloudflare" class="headerlink" title="给博客通过CDN实现访问加速？——Cloudflare"></a>给博客通过CDN实现访问加速？——Cloudflare</h3><p><strong><a href="https://baike.baidu.com/item/CDN" target="_blank" rel="noopener">CDN</a></strong>的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。<em>就跟物流中心一样，哪里离你近就给你从哪发货。</em></p><p><strong>Cloudflare</strong> 以向客户提供网站安全管理、性能优化及相关的技术支持为主要业务。提供包括CDN、优化工具、安全、分析以及应用等服务。并且与百度有合作，国内部署有大量的节点，以及处理 GitHub Pages 的问题。</p><ol><li><p>注册账号</p></li><li><p>注册好后点击 <code>Add site</code>添加域名</p><p><em>这里我遇到了提示域名未注册的问题导致无法添加，经过测试是DNS解析的问题，我把记录值从域名变成A类型的IP地址得以解决</em></p></li><li><p>等待解析完成后<code>continue</code></p></li><li><p><img alt="" data-src="https://upload.cc/i1/2019/12/31/UnW943.png" class="lazyload"></p></li></ol><p>然后他会让你修改DNS服务器，我的是阿里云域名控制台，阿里云的DNS服务器修改如图，修改完成，等待一段时间后生效。<em>bbxren.site is now queued up to be re-checked. Please check back in a few hours. You’ll also be notified by email once your site becomes active.</em></p><p><img alt="" data-src="https://upload.cc/i1/2019/12/31/zkpNBi.png" class="lazyload"></p><p>你也可以通过<a href="https://lookup.icann.org/lookup" target="_blank" rel="noopener">WHOIS</a>查看自己的网站信息判断是否修改成功。</p><p>（不过这个方案可能GG了）</p><p>whois之后我又发现好像这两篇文章的博主并没有用Cloudflare（？？？），另一个使用了的速度和gitpages没什么区别（可能是因为内陆节点的问题），不过解决了百度抓取的问题，还有考虑到浏览器缓存问题，等我的DNS服务器check完后会再进一步测试，至于部署到coding，gitee等其他方案等因为不稳定原因直接pass了，可能会考虑jsDelivr或者备案后打包到七牛吧。</p><p>还有就是hexo的编译速度可能会出现变慢的情况，后续（审美疲劳）的时候会考虑换成<em>Hugo，据说是目前世界第一快的（滑稽），由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署</em>。</p><p>然后最近会解决考虑安全性下多台电脑和手机编写博客的问题。</p><p><a href="https://tding.top/archives/12c6c559.html" target="_blank" rel="noopener">参考文章1</a></p><p><a href="https://www.imhunk.com/cloudflare-tutorials/" target="_blank" rel="noopener">参考文章2</a></p><p><a href="https://mogeko.me/2019/056/" target="_blank" rel="noopener">使用了cloudflare的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客" scheme="http://bbxren.site/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="CDN" scheme="http://bbxren.site/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="http://bbxren.site/2020/01/20/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>http://bbxren.site/2020/01/20/算法/二分法/</id>
    <published>2020-01-20T11:49:04.000Z</published>
    <updated>2020-01-21T14:33:03.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>比如你要查一个以P打头的通讯录用户，或者R开头的单词，都更适合从中间查找，这种算法就是二分查找。其输入是一个<strong>有序</strong>的元素列表，查找元素包含在列表中，返回该位置，否则返回null。<br>如果列表包含100个元素，简单查找最多需要100次，二分查找最多只需要7次；如果列表包含40亿个数字，二分查找最多只需要32次，即运行时间为<em>对数时间（log时间）</em>。</p><h2 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h2><p>指出了算法的速度<br>一些常见的大O运行时间：</p><ul><li>O(log n)，也叫对数时间，这样的算法包括二分查找。</li><li>O(n)，也叫线性时间，这样的算法包括简单查找。</li><li>O(n * log n)，这样的算法包括快速排序。</li><li>O(n²)，选择排序，速度较慢。</li><li>O(n!)，例如旅行商问题。<h2 id="简明代码"><a href="#简明代码" class="headerlink" title="简明代码"></a>简明代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> len[],<span class="keyword">int</span> target,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"><span class="title">while</span><span class="params">(low &lt;= high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = low + (high-low) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (target == len[mid])&#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; len[mid])</span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>二分法思想简单，数据量大时算法加速提升速度快，要求待查数据已被整理为有序列表。</p><h2 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h2><ol><li>数据范围：整型范围为-2³¹～2³¹-1，二分查找时如果使用<br><code>int mid = (high + low) / 2;</code><br>对于较大的low和high可能相加后超过范围，因此使用<br><code>int mid = low + (high-low) / 2;</code> </li><li>边界确定。<br>边界确定关系到二分查找算法的赋值与判断。如<code>high &gt; low</code>还是<code>high &gt;= low</code>，<code>high = mid</code>还是 <code>high = mid - 1</code><br>还有high的初值是n还是n-1(n指元素个数)，一旦错误，会导致死循环或者返回错误的情况，应该保持统一的开闭区间，比如high初值为n时，是左闭右开区间[low,high),取子序列也应该是左闭右开区间，<code>while( low&lt; high)</code>，以及<code>high = mid;</code>,子区间序列为[low,mid)，当high初始值为n-1，则与示例代码相同，子区间为[low,mid-1]。<br>3.二分查找的变形，现实问题大多是二分查找的变形，不会是简单的基础模型，例如查找重复出现的元素第一次/最后一次出现的位置，返回小于（大于）或等于目标元素的最大（小）元素等，针对不同问题修改相应的判断和赋值语句，需要注意以下几点：<ul><li>注意high和low的赋值，保证目标元素必然不在排除序列中。</li><li>每次二分过程注意low和high的赋值和循环条件判断，保证不会出现死循环，即要么排除元素序列减少，要么结束循环。</li><li>退出循环时，分析此时目标元素形态，确定返回位置的正确表达形式。<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="方程求解（POJ-4140）"><a href="#方程求解（POJ-4140）" class="headerlink" title="方程求解（POJ 4140）"></a>方程求解（POJ 4140）</h3><strong>问题描述</strong><br>求下面方程的根：f(x) = x³- 5x²+ 10x - 80 = 0。<br><strong>输出要求</strong><br>精确到小数点后9位。<br><strong>输出样例</strong><br>5.705085930</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">double</span> low, <span class="keyword">double</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> mid;</span><br><span class="line"><span class="keyword">double</span> f;</span><br><span class="line"><span class="keyword">while</span> (high - low &gt; <span class="number">0.00000000001</span>) <span class="comment">//精度</span></span><br><span class="line">&#123;</span><br><span class="line">mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">f = mid * mid * mid - <span class="number">5</span> * mid * mid + <span class="number">10</span> * mid - <span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span> (f &lt; <span class="number">0</span>)</span><br><span class="line">low = mid;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">high = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.9lf\n"</span>,BinarySearch(<span class="number">0.0</span>,<span class="number">10.0</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在线翻译（POJ-2530）"><a href="#在线翻译（POJ-2530）" class="headerlink" title="在线翻译（POJ 2530）"></a>在线翻译（POJ 2530）</h3><p><strong>问题描述</strong><br>You have just moved from Waterloo to a big city. The people here speak an incomprehensible dialect of a foreign language. Fortunately, you have a dictionary to help you understand them.<br>输入<br>Input consists of up to 100,000 dictionary entries, followed by a blank line, followed by a message of up to 100,000 words. Each dictionary entry is a line containing an English word, followed by a space and a foreign language word. No foreign word appears more than once in the dictionary. The message is a sequence of words in the foreign language, one word on each line. Each word in the input is a sequence of at most 10 lowercase letters.<br><strong>输出要求</strong><br>Output is the message translated to English, one word per line. Foreign words not in the dictionary should be translated as “eh”.<br><strong>样例输入</strong><br>dog ogday<br>cat atcay<br>pig igpay<br>froot ootfray<br>loops oopslay</p><p>atcay<br>ittenkay<br>oopslay<br><strong>样例输出</strong><br>cat<br>eh<br>loops</p><p><strong>思路</strong><br>由于查找量大，最多可能有100000个，故采用二分法查找词条，这里要注意的是查找的内容为字符串，定义cmp()函数进行排序（sort函数的排序规则），字符串大小比较要用到strcmp()函数，strcmp(a,b)返回小于0的值表示a&lt;b。<br>还要注意输入格式的问题，即如何准确发现空行，可以使用cin.peek()探查输入流的下一个字符。若为换行，结束输入，转入翻译阶段，同时使用cin.peek()前要使用cin.get()处理掉行末换行符,同时排序部分用到了algorithm标准函数库里的sort函数，从网上了解到，sort函数使用的排序方法是类似于快排的方法，时间复杂度为n*log2(n)，执行效率较高！有关sort函数的用法，我参考了<a href="https://blog.csdn.net/liuzuyi200/article/details/8974326" target="_blank" rel="noopener">这篇文章</a>sort函数有三个参数：（1）第一个是要排序的数组的起始地址。（2）第二个是结束的地址（最后一位要排序的地址）（3）第三个参数是排序的方法，可以是从大到小也可是从小到大，还可以不写第三个参数，此时默认的排序方法是从小到大排序。<br>Sort函数使用模板:<code>Sort(start,end,排序方法)</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Entry</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> english[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">char</span> foreign[<span class="number">11</span>];</span><br><span class="line">&#125;entries[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cmp</span><span class="params">(Entry entry1,Entry entry2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(entry1.foreign, entry2.foreign) &lt; <span class="number">0</span>; <span class="comment">//将字典里的foreign从小到大排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> target[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, entries[num].english,entries[num].foreign);</span><br><span class="line">num++;</span><br><span class="line"><span class="built_in">cin</span>.get();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cin</span>.peek() == <span class="string">'\n'</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(entries, entries + num, Cmp);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>,target) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = num;</span><br><span class="line"><span class="keyword">while</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = low + (high + low) / <span class="number">2</span>;</span><br><span class="line">n = <span class="built_in">strcmp</span>(entries[mid].foreign, target);</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">low = mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">high = mid;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, entries[mid].english);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n)<span class="built_in">printf</span>(<span class="string">"en\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://bbxren.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Algorithm" scheme="http://bbxren.site/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Apriori算法</title>
    <link href="http://bbxren.site/2019/12/26/%E7%AE%97%E6%B3%95/Apriori%E7%AE%97%E6%B3%95/"/>
    <id>http://bbxren.site/2019/12/26/算法/Apriori算法/</id>
    <published>2019-12-26T13:40:08.000Z</published>
    <updated>2020-06-24T09:15:49.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Apriori算法"><a href="#Apriori算法" class="headerlink" title="Apriori算法"></a>Apriori算法</h3><p><img alt="" data-src="https://upload.cc/i1/2019/12/26/yYxlIG.png" class="lazyload"></p><p>Apriori性质：</p><ul><li>频繁项集的所有非空子集也都必须是频繁的</li><li>这是频繁项集的先验知识</li><li>可以减少候选频繁项集的数量</li></ul><p>Step1：通过迭代，检索出源数据中的所有频繁项集，即支持度不低于用户设定阈值的项集</p><p>Step2：利用第一步检索出的频繁项集构造出满足用户最小置信度的规则</p><h4 id="产生频繁项集"><a href="#产生频繁项集" class="headerlink" title="产生频繁项集"></a>产生频繁项集</h4><p><em>算法</em></p><p>①k=1</p><p>②由(k-1)项集产生候选k-项集</p><p>③依据Apriori性质，对候选k-项集进行剪枝</p><p>④扫描数据库，统计各个项目的出现次数</p><p>⑤依据最小支持度，由候选k-项集中产生频繁k-项集</p><p>⑥K=k+1</p><p>⑦转②,直到k=n为止</p><p><em>约定</em></p><p>•Ck：第k次迭代产生的候选项集为候选k项集</p><p>•Lk：第k次迭代产生的频繁项集为频繁k项集</p><p><img alt="" data-src="https://upload.cc/i1/2019/12/26/hnPTEX.png" class="lazyload"></p><ol><li><p>求频繁1项集L1</p><p>以项目集合I作为候选1项集C1，扫描数据库1次，统计各个项目的出现次数，根据设定的最小支持度得出频繁1项集L1</p></li><li><p>求频繁k+1项集Lk+1</p></li></ol><p>​        对前k-1个项目相同的每两个k频繁模式执行join操作，得到候选k+1项集Ck+1</p><p>​        根据Apriori性质，对Ck+1进行剪枝 </p><ol start="3"><li><p>扫描数据库一遍，确定每个c∈Ck+1的支持计数，据此得出频繁k+1项集Lk+1</p><p><strong><em>分析</em></strong></p><p>•每产生第K级的频繁项集，需要扫描数据库1次(计算支持度)</p><p>•如何从k频繁项集得到候选k+1项集？</p><p>–{a,b}+{a,c}=&gt;{a,b,c}</p><p>–{a,b}+{b,c}=&gt;{}</p><p>•通过k次迭代，可以产生长度从1到k的所有频繁项集</p></li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>看概念看得头痛，来个例子就很简单了，如下：</p><p><img alt="" data-src="https://upload.cc/i1/2019/12/26/otEdlj.png" class="lazyload"></p><p>数据库</p><p>•D</p><p>事务</p><p>•T</p><p>项目</p><p>•{I1}、 {I2}、 {I3}、 {I4}、 {I5}</p><p>项目集合</p><p>•I={I1，I2，I3，I4，I5}</p><p>用户要求的最小支持度阈值</p><p>•s=20%</p><p>规则置信度</p><p>c=60%</p><p><img alt="" data-src="https://ftp.bmp.ovh/imgs/2019/12/c8577f2c5f61f9f2.png" class="lazyload"></p><p>这就是第一次迭代，产生频繁1-项集，说白了就是数次数</p><p><img alt="" data-src="https://upload.cc/i1/2019/12/26/2iOnGk.png" class="lazyload"></p><p>然后是第二次迭代，产生频繁2-项集，得出{I4,I5}不是频繁2-项集</p><p><img alt="" data-src="https://ftp.bmp.ovh/imgs/2019/12/17af5214bfb5ce95.png" class="lazyload"></p><p>再进行第三次迭代，产生频繁3-项集，得到要求结果。</p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><ul><li>先进行Apriori剪枝，再通过支持度删除</li><li>负边界：所有非频繁，但符合Apriori性质的候选项集的集合</li><li>负边界中的项集是非频繁的，但每个项集的所有子集都是频繁的</li><li>负边界在改进算法中更为重要</li></ul><h4 id="从频繁项集产生关联规则"><a href="#从频繁项集产生关联规则" class="headerlink" title="从频繁项集产生关联规则"></a>从频繁项集产生关联规则</h4><ol><li><p>计算每一个频繁项集的子集</p><p>如{I1，I2，I5}</p><p>​    {I1，I2}和{I5}</p><p>​    {I1，I5}和{I2}</p><p>​    {I2，I5}和{I1}</p></li><li><p>得到规则</p><p>{I1，I2} →I5</p><p>{I1，I5} →I2</p><p>{I2，I5} →I1</p></li><li><p>计算规则的置信度</p><p>比如c({I1，I2} →I5)=s({I1，I2，I5}/s{I1，I2} )=2/3</p></li><li><p>4.置信度c大于给定的阈值的规则为强关联规则</p></li></ol><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><ul><li><p>如何拆分并产生频繁项集的子集？</p></li><li><p>{a,b,c,d}</p><p>{a,b,c} →d</p><p>{a} →{b,c,d}  ?</p><p>{a,b} →{c,d}   ?</p></li><li><p>并不是所有被挖掘出的强关联规则都有意义</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://bbxren.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="关联规则" scheme="http://bbxren.site/tags/%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99/"/>
    
      <category term="数据挖掘" scheme="http://bbxren.site/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="算法" scheme="http://bbxren.site/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python First Day</title>
    <link href="http://bbxren.site/2018/11/02/Python/pyDay1/"/>
    <id>http://bbxren.site/2018/11/02/Python/pyDay1/</id>
    <published>2018-11-02T02:56:27.000Z</published>
    <updated>2020-06-25T03:19:24.866Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>anaconda中python版本的切换，我这里因为要用到3.6版本，当前版本为3.7<br><img alt="avator" data-src="/2018/11/02/Python/pyDay1/conda_create.JPG" class="lazyload"></p><blockquote><blockquote><blockquote><p>conda creativate –name newpy36 python=3.6   # 安装python3.6<br>安装对应python的虚拟环境的时候会自动安装一些依赖库，输入y<br>安装完成后通过activate 进行激活<br>activate newpy36<br>通过deactivate 进行脱出<br>deactivate</p></blockquote></blockquote></blockquote><h1 id="Print-“hello-world”"><a href="#Print-“hello-world”" class="headerlink" title="Print(“hello world”)"></a>Print(“hello world”)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello World! 你好,世界! Hola mundo!"</span>);</span><br></pre></td></tr></table></figure><p>Hello World! 你好,世界! Hola mundo!<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello World!"</span>)</span><br><span class="line">print(<span class="string">"Hello Again"</span>)</span><br></pre></td></tr></table></figure></p><p>Hello World!<br>Hello Again<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"This is the 3rd line, \n"</span>,</span><br><span class="line">      <span class="string">"and this is also the 3rd line."</span>)</span><br><span class="line">This <span class="keyword">is</span> the <span class="number">3</span>rd line, </span><br><span class="line"> <span class="keyword">and</span> this <span class="keyword">is</span> also the <span class="number">3</span>rd line.</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"This is the 3rd line, \</span></span><br><span class="line"><span class="string">and this is also the 3rd line."</span>)</span><br></pre></td></tr></table></figure><p>This is the 3rd line, and this is also the 3rd line.</p><h1 id="Grammer"><a href="#Grammer" class="headerlink" title="Grammer"></a>Grammer</h1><p>Expression -&gt; Expression Operator Expression</p><p>Expression -&gt; Number</p><p>Operator -&gt; +, - , * , /</p><p>Number -&gt; 0,1,2,3,4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">4</span><span class="number">-5</span>)</span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">8</span> + )</span><br></pre></td></tr></table></figure><p>  File “<ipython-input-10-431bcf9f6328>“, line 1<br>    print(8 + )<br>              ^<br>SyntaxError: invalid syntax</ipython-input-10-431bcf9f6328></p><p>刘翔能跑多快？110米跨栏，13秒， 速度= 100米/13秒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">110</span>/<span class="number">12.97</span></span><br></pre></td></tr></table></figure><p>8.481110254433307</p><blockquote><h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><p><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP8</a><br>naming<br> public int numberOfCars = 34;         # Java<br> const numberOfCars = 34;          # JavaScript</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number_of_cars = <span class="number">34</span> <span class="comment"># Python</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># there is no &#123; &#125; and there is no ;</span></span><br><span class="line">x = <span class="number">6</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">7</span>:</span><br><span class="line">   print(x)</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>6<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">7</span>:</span><br><span class="line">   print(<span class="string">"x is smaller than 7"</span>)</span><br></pre></td></tr></table></figure></p><p>x is smaller than 7</p><h1 id="Semantics"><a href="#Semantics" class="headerlink" title="Semantics"></a>Semantics</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">8</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">7</span>:</span><br><span class="line">    print(<span class="string">"x is smaller than 7"</span>)   </span><br><span class="line">​    print(<span class="string">"x is bigger than 7"</span>)</span><br><span class="line">​</span><br></pre></td></tr></table></figure><h2 id="Variable-Names-and-Objects"><a href="#Variable-Names-and-Objects" class="headerlink" title="Variable, Names, and Objects"></a>Variable, Names, and Objects</h2><p>In Python, everything is implemented as an <strong>object</strong>.</p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>We will come back to what an object is later when we talk about Object Oriented Programming. For now, you may just think an object as a box that contains a piece of data.</p><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><p>Type defines what operations can be done on an object (data). For example, we know that numbers can be added together.</p><h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><h1 id="Variable-and-Value"><a href="#Variable-and-Value" class="headerlink" title="Variable and Value"></a>Variable and Value</h1><p>变量 和 值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">speed_of_liuxiang=<span class="number">110</span>/<span class="number">12.97</span></span><br><span class="line">distance= <span class="number">1000</span></span><br><span class="line">time = distance/speed_of_liuxiang</span><br><span class="line">print(time)</span><br><span class="line">print(time/<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p>117.9090909090909<br>1.965151515151515</p><h1 id="Assign-New-Value-Mutable"><a href="#Assign-New-Value-Mutable" class="headerlink" title="Assign New Value, Mutable"></a>Assign New Value, Mutable</h1><p>This is how we define variables in Python.<br>In Python, variables are just names. Assignment does not copy a value; it just attaches a name to the object that contains the data. The name is a reference to a thing rather than the thing itself. Think of a name as a sticky note.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">speed_of_joshua=<span class="number">110</span>/<span class="number">10</span></span><br><span class="line">time = distance/speed_of_joshua</span><br><span class="line">print(time)</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>90.9090909090909<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">time = time<span class="number">-10</span></span><br><span class="line">print(time)</span><br><span class="line"><span class="number">80.9090909090909</span></span><br></pre></td></tr></table></figure></p><h1 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h1><p>In this notebook, you will learn the concept of <strong>Variabels</strong>, <strong>Names</strong> and <strong>Object</strong>. And also 4 built-in data types in Python: </p><ul><li>Integer (int)</li><li>Float (float)</li><li>Boolean (bool)</li><li>String (str)</li></ul><h2 id="Integers"><a href="#Integers" class="headerlink" title="Integers"></a>Integers</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>123<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span></span><br></pre></td></tr></table></figure></p><p>  File “<ipython-input-30-b139c77ba8b1>“, line 1<br>    05<br>     ^<br>SyntaxError: invalid token</ipython-input-30-b139c77ba8b1></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>,<span class="number">456</span>,<span class="number">789</span></span><br></pre></td></tr></table></figure><p>(123, 456, 789)</p><p>###Integer Operations<br><em>Tips: </em><br>You may use print(variable) to print the value of variables in Python3, no matter what type of vairbale it is. Also, print(var1, var2) will print out the value of var1 and var2, separated by a white space.<br>In REPL, the result of the last operations will be printed out automatically<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>3<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">a += <span class="number">2</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure></p><p>7<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">a = a - <span class="number">3</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span> // <span class="number">5</span></span><br></pre></td></tr></table></figure><p>1<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span> % <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>4<br>优先权</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> + <span class="number">3</span> * <span class="number">4</span></span><br></pre></td></tr></table></figure><p>14</p><h3 id="How-Big-Is-an-int"><a href="#How-Big-Is-an-int" class="headerlink" title="How Big Is an int?"></a>How Big Is an int?</h3><p>In Python2, the size of an int was limited to 32 bits, which is enough to store an integer from -2,147,483,648 to 2,147,483,647. A long can store 64 bits. Integers larger than the range will cause Integer Overflow.</p><p>In case you wonder where does this range come from. Computers store numbers in its binary format, 32 bits means we have 32 binary bits to store a number. That’s why we can only store  232  different integers. Since we want to store both positive numbers and negative numbers at the same time, each side will get  231  numbers, which is 2,147,483,648.</p><p>In Python3, an int can handle any integer no matter how large it is without causing overflow.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>**<span class="number">20</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>100000000000000000000</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a*a</span><br></pre></td></tr></table></figure><p>10000000000000000000000000000000000000000<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>10<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b10</span></span><br></pre></td></tr></table></figure></p><p>2<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0o10</span></span><br></pre></td></tr></table></figure></p><p>8<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x10</span></span><br></pre></td></tr></table></figure></p><p>16</p><h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  a = <span class="number">98.5</span></span><br><span class="line">type(a)</span><br></pre></td></tr></table></figure><p>float</p><h3 id="Tip-You-may-use-type-variable-to-get-the-type-of-an-variable-For-example-type-1-will-return-int"><a href="#Tip-You-may-use-type-variable-to-get-the-type-of-an-variable-For-example-type-1-will-return-int" class="headerlink" title="Tip:You may use type(variable) to get the type of an variable. For example, type(1) will return int."></a>Tip:You may use <strong>type(variable)</strong> to get the type of an variable. For example, type(1) will return int.</h3><p>You an also use scientific notations:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9.8125e2</span></span><br></pre></td></tr></table></figure><p>981.25</p><h3 id="Math-Functions"><a href="#Math-Functions" class="headerlink" title="Math Functions"></a>Math Functions</h3><p>Python also provides a lot of useful math functions, included in math package. To use them, you’ll have to import math first.</p><blockquote><p>It’s ok if you don’t understand what is a package or what does import mean here. We will cover this later when we talk about Modules and Packages.</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(math.pi)</span><br><span class="line">print(math.e)</span><br></pre></td></tr></table></figure><p>3.141592653589793<br>2.718281828459045<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(math.floor(<span class="number">98.6</span>))</span><br><span class="line">print(math.ceil(<span class="number">98.6</span>))</span><br><span class="line"><span class="comment">#向下取整，向上取整</span></span><br></pre></td></tr></table></figure></p><p>98<br>99<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(math.pow(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">#Tip: math.pow always return a float.</span></span><br><span class="line">print(<span class="number">2</span>**<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>8.0<br>8<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">math.sqrt(<span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><p>5.0</p><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(<span class="number">1</span> &lt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>bool<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span> &lt; <span class="number">1</span>) <span class="keyword">or</span> (<span class="number">1</span> &lt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>true<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> (<span class="number">2</span> &lt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>true<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">2</span> &lt; <span class="number">1</span>) <span class="keyword">and</span> (<span class="number">1</span> &lt; <span class="number">2</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure></p><p>false<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(a)</span><br></pre></td></tr></table></figure></p><p>false<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure></p><p>false<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">2</span> != <span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure></p><p>true</p><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><p>Strings are our first example of Python sequence. It is a sequence of characters.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'this is a string'</span></span><br><span class="line">type(s)</span><br></pre></td></tr></table></figure></p><p>str<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"this is also a string"</span></span><br><span class="line"><span class="string">"I'm a string"</span></span><br></pre></td></tr></table></figure></p><p>“this is also a string”<br>“I’m a string”<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># He said:"I'm a string"</span></span><br><span class="line"><span class="comment"># escape</span></span><br><span class="line">s = <span class="string">"He said: \"I'm a string\""</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><p>He said: “I’m a string”<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">long_s = <span class="string">"You can put a long string that \ntakes up multiple lines here"</span></span><br><span class="line">print(long_s)</span><br></pre></td></tr></table></figure></p><p>You can put a long string that<br>takes up multiple lines here<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'''</span></span><br><span class="line"><span class="string">This is the first line</span></span><br><span class="line"><span class="string">    This is the second line</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><p>This is the first line<br>    This is the second line</p><h3 id="Type-Conversions"><a href="#Type-Conversions" class="headerlink" title="Type Conversions"></a>Type Conversions</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = str(<span class="number">98.6</span>)</span><br><span class="line">a</span><br><span class="line">type(a)</span><br></pre></td></tr></table></figure><p>str<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str(<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>‘True’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float(<span class="string">'98.6'</span>)</span><br></pre></td></tr></table></figure></p><p>98.6<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="string">'-123'</span>)</span><br></pre></td></tr></table></figure></p><p>-123</p><p>If you mix different numeric types, Ptyhon will try to do the conversion for you. However, you cannot mix string with numbers, unless the operation make sense (string combination &amp; duplicate).</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2.0</span></span><br></pre></td></tr></table></figure><p>3.0</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">True</span> + <span class="number">3</span></span><br></pre></td></tr></table></figure><p>4<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.88</span>+<span class="string">"28"</span></span><br></pre></td></tr></table></figure></p><hr><p>TypeError                                 Traceback (most recent call last)</p><p><ipython-input-83-a07d69ac8e55> in <module>()<br>—-&gt; 1 3.88+”28”</module></ipython-input-83-a07d69ac8e55></p><p>TypeError: unsupported operand type(s) for +: ‘float’ and ‘str’</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(int(<span class="number">3.88</span>) + int(<span class="string">"28"</span>))  </span><br><span class="line">print(int(<span class="number">-2.95</span>) + int(<span class="string">"28"</span>))</span><br><span class="line">print(float(<span class="number">3</span>) + float(<span class="string">"28"</span>)) </span><br><span class="line">print(str(<span class="number">3.88</span>) + str(<span class="number">28</span>))</span><br></pre></td></tr></table></figure><p>31<br>26<br>31.0<br>3.8828</p><h3 id="Combine-amp-Duplicate"><a href="#Combine-amp-Duplicate" class="headerlink" title="Combine &amp; Duplicate"></a>Combine &amp; Duplicate</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">"My name is"</span></span><br><span class="line">name = <span class="string">"Joshua"</span></span><br><span class="line">greeting = template + <span class="string">" "</span> + name + <span class="string">"."</span></span><br><span class="line">print(greeting)</span><br></pre></td></tr></table></figure><p>My name is Joshua.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">laugh = <span class="number">3</span> * <span class="string">"Ha "</span></span><br><span class="line">print(laugh)</span><br></pre></td></tr></table></figure></p><p>Ha Ha Ha </p><h3 id="Extract-amp-Slice"><a href="#Extract-amp-Slice" class="headerlink" title="Extract &amp;Slice"></a>Extract &amp;Slice</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letters = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">letters[<span class="number">0</span> ]</span><br><span class="line"><span class="string">'a'</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">letters = <span class="string">"我爱北京天安门"</span></span><br><span class="line"></span><br><span class="line">letters[<span class="number">25</span>]</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IndexError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-199</span><span class="number">-3</span>d4ad1959dec&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 letters[25]</span><br><span class="line"></span><br><span class="line">IndexError: string index out of range</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letters[<span class="number">-5</span>]</span><br><span class="line"><span class="string">'北'</span></span><br></pre></td></tr></table></figure><ul><li>You can extract a substring from a string by using slice. Format: [start:end:step]</li></ul><p>[:] extracts the all string<br>[start:] from start to the end<br>[:end] from the beginning to the end - 1 offset<br>[start:end] from start to end - 1<br>[start:end:step] from start to end - 1, skipping characters by step<br>[:] extracts the all string</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters[:]</span><br></pre></td></tr></table></figure><p>‘我爱北京天安门’<br>[start:] from start to the end<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure></p><p>‘北京天安门’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters[<span class="number">-3</span>:]</span><br></pre></td></tr></table></figure></p><p>‘天安门’<br>[:end] from the beginning to the end - 1 offset<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><p>‘我爱北京天’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters[:<span class="number">100</span>]</span><br></pre></td></tr></table></figure></p><p>‘我爱北京天安门’<br>[start:end] from start to end - 1<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters[<span class="number">2</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><p>‘北京天’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters[<span class="number">-6</span>:<span class="number">-2</span>]</span><br></pre></td></tr></table></figure></p><p>‘爱北京天’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters[<span class="number">-2</span>:<span class="number">-6</span>]</span><br></pre></td></tr></table></figure></p><p>‘’<br>[start:end:step] from start to end - 1, skipping characters by step<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#步长（间隔）</span></span><br><span class="line">letters[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure></p><p>‘爱京’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters[::<span class="number">7</span>]</span><br></pre></td></tr></table></figure></p><p>‘我’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letters[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><p>‘门安天京北爱我’</p><p>###　Get Length<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(letters)</span><br></pre></td></tr></table></figure></p><p>7</p><h3 id="Split-amp-Join"><a href="#Split-amp-Join" class="headerlink" title="Split &amp; Join"></a>Split &amp; Join</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以逗号切分</span></span><br><span class="line">lan = <span class="string">"python ruby c c++ swift"</span></span><br><span class="line">lan.split()</span><br></pre></td></tr></table></figure><p>[‘python’, ‘ruby’, ‘c’, ‘c++’, ‘swift’]<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">todos = <span class="string">"download python, install, download ide, learn"</span></span><br><span class="line">todos.split(<span class="string">', '</span>)</span><br></pre></td></tr></table></figure></p><p>[‘download python’, ‘install’, ‘download ide’, ‘learn’]<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'###'</span>.join([<span class="string">'download python'</span>, <span class="string">'install'</span>, <span class="string">'download ide'</span>, <span class="string">'learn'</span>])</span><br></pre></td></tr></table></figure></p><p>‘download python###install###download ide###learn’</p><h3 id="Substitue"><a href="#Substitue" class="headerlink" title="Substitue"></a>Substitue</h3><p>  <strong><em>#居中居左排版</em></strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'I like C. I like C++. I like Python'</span></span><br><span class="line">s.replace(<span class="string">'like'</span>, <span class="string">'hate'</span>)</span><br></pre></td></tr></table></figure></p><p>‘I hate C. I hate C++. I hate Python’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.replace(<span class="string">'like'</span>, <span class="string">'hate'</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>‘I hate C. I like C++. I like Python’</p><h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">align = <span class="string">'Learn how to align'</span></span><br><span class="line">align.center(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p>‘      Learn how to align      ‘<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">align.ljust(<span class="number">30</span>)</span><br></pre></td></tr></table></figure></p><p>‘Learn how to align            ‘<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">align.rjust(<span class="number">30</span>)</span><br></pre></td></tr></table></figure></p><p>‘            Learn how to align’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#chars -- 移除字符串头尾指定的字符序列。</span></span><br><span class="line"><span class="comment">#str.strip([chars]);</span></span><br><span class="line">ralign = align.rjust(<span class="number">30</span>)</span><br><span class="line">ralign.strip()</span><br></pre></td></tr></table></figure></p><p>‘Learn how to align’</p><h3 id="Other-useful-tools"><a href="#Other-useful-tools" class="headerlink" title="Other useful tools"></a>Other useful tools</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py_desc = <span class="string">"Python description: Python is a programming language that lets you work quickly and integrate systems more effectively."</span></span><br><span class="line">py_desc.startswith(<span class="string">'Python'</span>)</span><br></pre></td></tr></table></figure><p>True<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py_desc.endswith(<span class="string">'effectively.'</span>)</span><br></pre></td></tr></table></figure></p><p>True<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py_desc.find(<span class="string">'language'</span>) <span class="comment">#找到language的起始位置</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><p>44<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py_desc.isalnum()</span><br></pre></td></tr></table></figure></p><p>False<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py_desc.count(<span class="string">"Python"</span>) <span class="comment"># 出现次数</span></span><br></pre></td></tr></table></figure></p><p>2<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py_desc.strip(<span class="string">'.'</span>)</span><br></pre></td></tr></table></figure></p><p>‘Python description: Python is a programming language that lets you work quickly and integrate systems more effectively’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py_desc.upper()</span><br></pre></td></tr></table></figure></p><p>‘PYTHON DESCRIPTION: PYTHON IS A PROGRAMMING LANGUAGE THAT LETS YOU WORK QUICKLY AND INTEGRATE SYSTEMS MORE EFFECTIVELY.’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py_desc.title()</span><br></pre></td></tr></table></figure></p><p>‘Python Description: Python Is A Programming Language That Lets You Work Quickly And Integrate Systems More Effectively.’</p><h3 id="in-and-out"><a href="#in-and-out" class="headerlink" title="in and out~~"></a>in and out~~</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Read user input ###</span></span><br><span class="line">age = input(<span class="string">"How old are you?"</span>)</span><br><span class="line">height = input(<span class="string">"How tall are you?"</span>)</span><br><span class="line">weight = input(<span class="string">"How much do you weigh?"</span>)</span><br><span class="line">​print(<span class="string">"So, you're %s old, %s tall and %s heavy."</span> % (age, height, weight))</span><br></pre></td></tr></table></figure><p>How old are you?10<br>How tall are you?20<br>How much do you weigh?30<br>So, you’re 10 old, 20 tall and 30 heavy.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Read user input ###</span></span><br><span class="line">age = input(<span class="string">"How old are you?\n"</span>)</span><br><span class="line">height = input(<span class="string">"How tall are you?\n"</span>)</span><br><span class="line">weight = input(<span class="string">"How much do you weigh?\n"</span>)</span><br><span class="line">​print(<span class="string">"So, you're %s yers old, %s meters tall and %s kg heavy."</span> % (age, height, weight))</span><br></pre></td></tr></table></figure></p><p>How old are you?<br>10<br>How tall are you?<br>20<br>How much do you weigh?<br>30<br>So, you’re 10 yers old, 20 meters tall and 30 kg heavy.<br>字符串格式输出:<br><a href="https://pyformat.info/#string_pad_align" target="_blank" rel="noopener">https://pyformat.info/#string_pad_align</a><br><a href="https://dbader.org/blog/python-string-formatting" target="_blank" rel="noopener">https://dbader.org/blog/python-string-formatting</a><br><a href="https://docs.python.org/3.6/library/string.html" target="_blank" rel="noopener">https://docs.python.org/3.6/library/string.html</a></p><h3 id="New-Style-in-Python-3-6"><a href="#New-Style-in-Python-3-6" class="headerlink" title="New Style in Python 3.6"></a>New Style in Python 3.6</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'%s %s'</span> % (<span class="string">'one'</span>, <span class="string">'two'</span>))</span><br><span class="line">print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>))</span><br><span class="line">print(<span class="string">'%d %d'</span> % (<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>one two<br>one two<br>1 2<br>1 2<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'&#123;1&#125; &#123;0&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>))</span><br></pre></td></tr></table></figure></p><p>two one<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">print(<span class="string">f'Five plus ten is <span class="subst">&#123;a + b&#125;</span> and not <span class="subst">&#123;<span class="number">2</span> * (a + b)&#125;</span>.'</span>)</span><br></pre></td></tr></table></figure></p><p>Five plus ten is 15 and not 30.<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Joshua"</span></span><br><span class="line">question = <span class="string">"hello"</span></span><br><span class="line">print(<span class="string">f"Hello, <span class="subst">&#123;name&#125;</span>! How's it <span class="subst">&#123;question&#125;</span>?"</span>)</span><br></pre></td></tr></table></figure></p><p>Hello, Joshua! How’s it hello?</p><h3 id="python基础瞎写着玩"><a href="#python基础瞎写着玩" class="headerlink" title="python基础瞎写着玩"></a>python基础瞎写着玩</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python两个数交换</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">a,b = b,a</span><br><span class="line">print(<span class="string">"a = &#123;&#125; b = &#123;&#125; "</span>.format(a,b))</span><br></pre></td></tr></table></figure><p>a = 20 b = 10<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure></p><p>The Zen of Python, by Tim Peters</p><p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">534</span>+<span class="number">31</span></span><br></pre></td></tr></table></figure></p><p>565<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span> ** <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>529<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> ** (<span class="number">1</span>/<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>2.154434690031884<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.pi</span><br></pre></td></tr></table></figure></p><p>3.141592653589793<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">math.sin(math.pi/<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>1.0<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">math.floor(<span class="number">313.323</span>)</span><br></pre></td></tr></table></figure></p><p>313<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">math.ceil(<span class="number">323.23</span>)</span><br></pre></td></tr></table></figure></p><p>324<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(<span class="number">10</span>/<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>3.333<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple_cost = <span class="number">10</span></span><br><span class="line">pipe_cost = <span class="number">12</span></span><br><span class="line"><span class="string">"苹果的价格：&#123;&#125; 辣椒的价格：&#123;&#125;"</span>.format(apple_cost,pipe_cost)</span><br></pre></td></tr></table></figure></p><p>‘苹果的价格：10 辣椒的价格：12’<br> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#id 函数，返回一个身份识别符，可以理解为一个变量的内存地址</span></span><br><span class="line">line = <span class="string">"hell</span></span><br></pre></td></tr></table></figure></p><p>2323860958384</p><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>‘hello ,wel’</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line[<span class="number">2</span>:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>‘llo ,wel’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line[<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><p>‘l’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line [<span class="number">2</span>:<span class="number">20</span>:<span class="number">2</span>]  <span class="comment"># 隔两个一取</span></span><br></pre></td></tr></table></figure></p><p>‘lo,ecm oh’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line[<span class="number">-10</span>:] <span class="comment"># 取后十个字符</span></span><br></pre></td></tr></table></figure></p><p>‘me to here’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line[::<span class="number">-1</span>] <span class="comment">#步长为-1 翻转字符</span></span><br></pre></td></tr></table></figure></p><p>‘ereh ot emoclew, olleh’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">line.capitalize</span><br><span class="line">line.capitalize?</span><br><span class="line">line.capitalize()</span><br></pre></td></tr></table></figure></p><p>‘Hello ,welcome to here’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line.center(<span class="number">100</span>,<span class="string">'-'</span>)</span><br></pre></td></tr></table></figure></p><p>‘—————————————hello ,welcome to here—————————————‘<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line.count(<span class="string">'l'</span>)</span><br></pre></td></tr></table></figure></p><p>3<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line.endswith(<span class="string">"ere"</span>)</span><br></pre></td></tr></table></figure></p><p>True<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line.startswith(<span class="string">"qw"</span>)</span><br></pre></td></tr></table></figure></p><p>False<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line.find(<span class="string">"e"</span>) <span class="comment">#寻找e,返回下标，不存在返回-1</span></span><br></pre></td></tr></table></figure></p><p>1<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">line =<span class="string">"   hello   \t\n "</span></span><br><span class="line">line.strip()</span><br></pre></td></tr></table></figure></p><p>‘hello’<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line.replace(<span class="string">"l"</span>,<span class="string">"$$$"</span>)</span><br></pre></td></tr></table></figure></p><p>‘   he$$$$$$o   \t\n ‘</p><h2 id="小白容易踩的坑"><a href="#小白容易踩的坑" class="headerlink" title="小白容易踩的坑"></a>小白容易踩的坑</h2><blockquote><p>excepted an indented block</p></blockquote><p>1.使用IF条件时需要注意缩进，Python中没有分号，通过缩进来表示上下级从属关系。<br>2.冒号后面需要写上一定内容</p><ul><li>笔记来源： wanmen</li><li>排版及修改： Bbxren</li></ul>]]></content>
    
    <summary type="html">
    
      python for basic data type
    
    </summary>
    
      <category term="Python" scheme="http://bbxren.site/categories/Python/"/>
    
    
      <category term="Python" scheme="http://bbxren.site/tags/Python/"/>
    
  </entry>
  
</feed>

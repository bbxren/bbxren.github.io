<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我是王文徽徽徽呀！</title>
  
  <subtitle>(●&#39;◡&#39;●)ﾉ♥不想做设计的作家不是好程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bbxren.top/"/>
  <updated>2018-11-02T03:13:24.531Z</updated>
  <id>http://bbxren.top/</id>
  
  <author>
    <name>Bbxren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python First Day</title>
    <link href="http://bbxren.top/2018/11/02/pyDay1/"/>
    <id>http://bbxren.top/2018/11/02/pyDay1/</id>
    <published>2018-11-02T02:56:27.000Z</published>
    <updated>2018-11-02T03:13:24.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Print-“hello-world”"><a href="#Print-“hello-world”" class="headerlink" title="Print(“hello world”)"></a>Print(“hello world”)</h1><p>print(“Hello World! 你好,世界! Hola mundo!”)<br>Hello World! 你好,世界! Hola mundo!</p><p>print(“Hello World!”)<br>print(“Hello Again”)<br>Hello World!<br>Hello Again</p><p>print(“This is the 3rd line, \n”,<br>      “and this is also the 3rd line.”)<br>This is the 3rd line,<br> and this is also the 3rd line.</p><p>print(“This is the 3rd line, \<br>and this is also the 3rd line.”)<br>This is the 3rd line, and this is also the 3rd line.<br>Grammer<br>Expression -&gt; Expression Operator Expression</p><p>Expression -&gt; Number</p><p>Operator -&gt; +, - , * , /</p><p>Number -&gt; 0,1,2,3,4</p><p>print(4-5)<br>-1</p><p>print(8 + )<br>  File “<ipython-input-10-431bcf9f6328>“, line 1<br>    print(8 + )<br>              ^<br>SyntaxError: invalid syntax</ipython-input-10-431bcf9f6328></p><p>刘翔能跑多快？110米跨栏，13秒， 速度= 100米/13秒</p><p>110/12.97<br>8.481110254433307<br>Syntax<br>PEP8</p><p>naming</p><p>public int numberOfCars = 34;         # Java<br>const numberOfCars = 34;          # JavaScript</p><p>number_of_cars = 34 # Python</p><h1 id="there-is-no-and-there-is-no"><a href="#there-is-no-and-there-is-no" class="headerlink" title="there is no { } and there is no ;"></a>there is no { } and there is no ;</h1><p>x = 8<br>if x &lt; 7:<br>print(x)<br>​<br>  File “<ipython-input-34-b27816ef1c10>“, line 4<br>    print(x)<br>        ^<br>IndentationError: expected an indented block</ipython-input-34-b27816ef1c10></p><p>if x &lt; 7:<br>print(“x is smaller than 7”)<br>  File “<ipython-input-12-6623bae93a8b>“, line 2<br>    print(“x is smaller than 7”)<br>        ^<br>IndentationError: expected an indented block</ipython-input-12-6623bae93a8b></p><p>Semantics</p><p>x=8</p><p>if x &lt; 7:<br>    print(“x is smaller than 7”)<br>​<br>    print(“x is bigger than 7”)<br>​<br>Variable, Names, and Objects<br>In Python, everything is implemented as an object.</p><p>Object<br>We will come back to what an object is later when we talk about Object Oriented Programming. For now, you may just think an object as a box that contains a piece of data.</p><p>Type<br>Type defines what operations can be done on an object (data). For example, we know that numbers can be added together.</p><p>Variable<br>Variable and Value<br>变量 和 值</p><p>speed_of_liuxiang=110/12.97<br>distance= 1000</p><p>time = distance/speed_of_liuxiang<br>print(time)<br>print(time/60)<br>117.9090909090909<br>1.965151515151515<br>Assign New Value, Mutable<br>= is assigment</p><p>&lt;=======</p><p>This is how we define variables in Python.</p><p>In Python, variables are just names. Assignment does not copy a value; it just attaches a name to the object that contains the data. The name is a reference to a thing rather than the thing itself. Think of a name as a sticky note.</p><p>Names stick to objects</p><p>speed_of_joshua=110/10<br>time = distance/speed_of_joshua<br>print(time)<br>​<br>90.9090909090909</p><p>time = time-10<br>print(time)<br>80.9090909090909<br>Data Type<br>In this notebook, you will learn the concept of Variabels, Names and Object. And also 4 built-in data types in Python:</p><p>Integer (int)<br>Float (float)<br>Boolean (bool)<br>String (str)<br>Integers</p><p>123<br>123</p><p>05<br>  File “<ipython-input-30-b139c77ba8b1>“, line 1<br>    05<br>     ^<br>SyntaxError: invalid token</ipython-input-30-b139c77ba8b1></p><p>123,456,789<br>(123, 456, 789)<br>Integer Operations<br><em>Tips: </em></p><p>You may use print(variable) to print the value of variables in Python3, no matter what type of vairbale it is. Also, print(var1, var2) will print out the value of var1 and var2, separated by a white space.<br>In REPL, the result of the last operations will be printed out automatically</p><p>1 + 2</p><p>a = 5<br>a += 2<br>a<br>7</p><p>a = 5<br>a = a - 3<br>a</p><p>9 // 5<br>1</p><p>9 % 5<br>4<br>优先权</p><p>2 + 3 * 4<br>14<br>How Big Is an int?<br>In Python2, the size of an int was limited to 32 bits, which is enough to store an integer from -2,147,483,648 to 2,147,483,647. A long can store 64 bits. Integers larger than the range will cause Integer Overflow.</p><p>In case you wonder where does this range come from. Computers store numbers in its binary format, 32 bits means we have 32 binary bits to store a number. That’s why we can only store  232  different integers. Since we want to store both positive numbers and negative numbers at the same time, each side will get  231  numbers, which is 2,147,483,648.</p><p>In Python3, an int can handle any integer no matter how large it is without causing overflow.</p><p>a = 10**100<br>a<br>10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</p><p>a*a<br>100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</p><p>10</p><p>0b10</p><p>0o10</p><p>0x10<br>Float</p><p>a = 98.5<br>type(a)<br>Tip:You may use type(variable) to get the type of an variable. For example, type(1) will return int.</p><p>You an also use scientific notations:</p><p>9.8125e2<br>981.25<br>Math Functions<br>Python also provides a lot of useful math functions, included in math package. To use them, you’ll have to import math first.</p><p>It’s ok if you don’t understand what is a package or what does import mean here. We will cover this later when we talk about Modules and Packages.</p><p>import math</p><p>print(math.pi)<br>print(math.e)<br>3.141592653589793<br>2.718281828459045</p><p>print(math.floor(98.6))<br>print(math.ceil(98.6))<br>98<br>99</p><p>print(math.pow(2, 3)) #Tip: math.pow always return a float.<br>print(2**3)<br>8.0<br>8</p><p>math.sqrt(25)<br>5.0<br>Boolean</p><p>type(1 &lt; 2)<br>bool</p><p>(2 &lt; 1) or (1 &lt; 2)</p><p>not (2 &lt; 1)</p><p>a = (2 &lt; 1) and (1 &lt; 2)<br>a</p><p>type(a)</p><p>a = (2 == 1)<br>a</p><p>a = (2 != 1)<br>a<br>Strings<br>Strings are our first example of Python sequence. It is a sequence of characters.</p><p>s = ‘this is a string’<br>type(s)</p><p>“this is also a string”<br>‘this is also a string’</p><p>“I’m a string”<br>“I’m a string”</p><h1 id="He-said-”I’m-a-string”"><a href="#He-said-”I’m-a-string”" class="headerlink" title="He said:”I’m a string”"></a>He said:”I’m a string”</h1><h1 id="escape"><a href="#escape" class="headerlink" title="escape"></a>escape</h1><p>s = “He said: \”I’m a string\””<br>print(s)<br>He said: “I’m a string”</p><p>long_s = “You can put a long string that \ntakes up multiple lines here”<br>print(long_s)<br>You can put a long string that<br>takes up multiple lines here</p><p>s = ‘’’<br>This is the first line<br>    This is the second line<br>‘’’<br>print(s)</p><p>This is the first line<br>    This is the second line</p><p>Type Conversions</p><p>a = str(98.6)<br>a<br>type(a)<br>str</p><p>str(True)<br>‘True’</p><p>float(‘98.6’)<br>98.6</p><p>int(‘-123’)<br>-123<br>If you mix different numeric types, Ptyhon will try to do the conversion for you. However, you cannot mix string with numbers, unless the operation make sense (string combination &amp; duplicate).</p><p>1 + 2.0<br>3.0</p><p>True + 3<br>4</p><h2 id="3-88-”28”"><a href="#3-88-”28”" class="headerlink" title="3.88+”28”"></a>3.88+”28”</h2><p>TypeError                                 Traceback (most recent call last)</p><p><ipython-input-83-a07d69ac8e55> in <module>()<br>—-&gt; 1 3.88+”28”</module></ipython-input-83-a07d69ac8e55></p><p>TypeError: unsupported operand type(s) for +: ‘float’ and ‘str’</p><p>print(int(3.88) + int(“28”))<br>print(int(-2.95) + int(“28”))<br>print(float(3) + float(“28”))<br>print(str(3.88) + str(28))<br>31<br>26<br>31.0<br>3.8828<br>Combine &amp; Duplicate</p><p>template = “My name is”<br>name = “Joshua”<br>greeting = template + “ “ + name + “.”<br>print(greeting)<br>My name is Joshua.</p><p>laugh = 3 * “Ha “<br>print(laugh)<br>Ha Ha Ha<br>Extract &amp;Slice<br>letters = “abcdefghijklmnopqrstuvwxyz”<br>letters[0 ]</p><p>letters = “我爱北京天安门”</p><p>letters[25]<br>‘z’</p><p>letters[-5]<br>‘北’<br>You can extract a substring from a string by using slice. Format: [start:end:step]</p><p>[:] extracts the all string<br>[start:] from start to the end<br>[:end] from the beginning to the end - 1 offset<br>[start:end] from start to end - 1<br>[start:end:step] from start to end - 1, skipping characters by step<br>[:] extracts the all string</p><p>letters[:]<br>‘我爱北京天安门’<br>[start:] from start to the end</p><p>letters[2:]<br>‘北京天安门’</p><p>letters[-3:]<br>‘天安门’<br>[:end] from the beginning to the end - 1 offset</p><p>letters[:5]<br>‘我爱北京天’</p><p>letters[:100]<br>‘我爱北京天安门’<br>[start:end] from start to end - 1</p><p>letters[2:5]<br>‘北京天’</p><p>letters[-6:-2]<br>‘爱北京天’</p><p>letters[-2:-6]<br>‘’<br>[start:end:step] from start to end - 1, skipping characters by step</p><p>letters[1:5:2]</p><p>letters[::7]</p><p>letters[::-1]<br>Get Length</p><p>len(letters)<br>7<br>Split &amp; Combine</p><p>lan = “python ruby c c++ swift”<br>lan.split()<br>[‘python’, ‘ruby’, ‘c’, ‘c++’, ‘swift’]</p><p>todos = “download python, install, download ide, learn”<br>todos.split(‘, ‘)<br>[‘download python’, ‘install’, ‘download ide’, ‘learn’]</p><p>‘,’.join([‘download python’, ‘install’, ‘download ide’, ‘learn’])<br>‘download python,install,download ide,learn’<br>Substitue</p><p>s = ‘I like C. I like C++. I like Python’<br>s.replace(‘like’, ‘hate’)<br>‘I hate C. I hate C++. I hate Python’</p><p>s.replace(‘like’, ‘hate’, 1)<br>‘I hate C. I like C++. I like Python’<br>Layout</p><p>align = ‘Learn how to align’<br>align.center(30)<br>‘      Learn how to align      ‘</p><p>align.ljust(30)<br>‘Learn how to align            ‘</p><p>align.rjust(30)<br>‘            Learn how to align’</p><p>ralign = align.rjust(30)<br>ralign.strip()<br>‘Learn how to align’<br>Other useful tools</p><p>py_desc = “Python description: Python is a programming language that lets you work quickly and integrate systems more effectively.”<br>py_desc.startswith(‘Python’)<br>True</p><p>py_desc.endswith(‘effectively.’)<br>True</p><p>py_desc.find(‘language’) #找到language的起始位置<br>​<br>44</p><p>py_desc.isalnum()<br>False</p><p>py_desc.count(“Python”) # 出现次数<br>2</p><p>py_desc.strip(‘.’)<br>‘Python description: Python is a programming language that lets you work quickly and integrate systems more effectively’</p><p>py_desc.upper()<br>‘PYTHON DESCRIPTION: PYTHON IS A PROGRAMMING LANGUAGE THAT LETS YOU WORK QUICKLY AND INTEGRATE SYSTEMS MORE EFFECTIVELY.’</p><p>py_desc.title()<br>‘Python Description: Python Is A Programming Language That Lets You Work Quickly And Integrate Systems More Effectively.’<br>in and out~~</p><h3 id="Read-user-input"><a href="#Read-user-input" class="headerlink" title="Read user input"></a>Read user input</h3><p>age = input(“How old are you?”)<br>height = input(“How tall are you?”)<br>weight = input(“How much do you weigh?”)<br>​<br>print(“So, you’re %s old, %s tall and %s heavy.” % (age, height, weight))<br>How old are you?10<br>How tall are you?20<br>How much do you weigh?30<br>So, you’re 10 old, 20 tall and 30 heavy.</p><h3 id="Read-user-input-1"><a href="#Read-user-input-1" class="headerlink" title="Read user input"></a>Read user input</h3><p>age = input(“How old are you?\n”)<br>height = input(“How tall are you?\n”)<br>weight = input(“How much do you weigh?\n”)<br>​<br>print(“So, you’re %s yers old, %s meters tall and %s kg heavy.” % (age, height, weight))<br>How old are you?<br>10<br>How tall are you?<br>20<br>How much do you weigh?<br>30<br>So, you’re 10 yers old, 20 meters tall and 30 kg heavy.<br>字符串格式输出:<br><a href="https://pyformat.info/#string_pad_align" target="_blank" rel="noopener">https://pyformat.info/#string_pad_align</a><br><a href="https://dbader.org/blog/python-string-formatting" target="_blank" rel="noopener">https://dbader.org/blog/python-string-formatting</a><br><a href="https://docs.python.org/3.6/library/string.html" target="_blank" rel="noopener">https://docs.python.org/3.6/library/string.html</a></p><p>New Style in Python 3.6</p><p>print(‘%s %s’ % (‘one’, ‘two’))<br>print(‘{} {}’.format(‘one’, ‘two’))<br>print(‘%d %d’ % (1, 2))<br>print(‘{} {}’.format(1, 2))</p><p>print(‘{1} {0}’.format(‘one’, ‘two’))</p><p>a = 5<br>b = 10<br>print(f’Five plus ten is {a + b} and not {2 * (a + b)}.’)<br>Five plus ten is 15 and not 30.</p><p>name = “Joshua”<br>question = “hello”<br>print(f”Hello, {name}! How’s it {question}?”)<br>Hello, Joshua! How’s it hello?</p><p>from wanmen</p><p>​</p>]]></content>
    
    <summary type="html">
    
      python基础语法及案例
    
    </summary>
    
      <category term="Python" scheme="http://bbxren.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://bbxren.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://bbxren.top/2018/10/25/hello%20world/"/>
    <id>http://bbxren.top/2018/10/25/hello world/</id>
    <published>2018-10-24T19:44:44.289Z</published>
    <updated>2018-10-31T02:44:20.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><a id="more"></a><p></p><p style="text-indent:2em">其实好早就搭了博客，却因为比较忙（jiekou）和一些其他原因（lan）,迟迟未让博客成形，最开始搭的博客也非常难看，现在还是决定再一次重新做人，认真学习，记录下自己成长的历程。虽然很多时候并没有养成一个记笔记、写博客的习惯，可能我更喜欢看到教程就立刻去做，并且享受做完之后的成就感，所以很难一边去截图一边去写笔记。不过还是觉得有这么一个习惯是很不错的，是对自己所学东西的一个审视，可能有的东西你在做的过程中很难注意到一些细节问题，但在做笔记的过程中你就会发现这些细小的，让你迷茫的东西。另外，看着自己的博文在时间线上一点点积累，就像是你给一颗种子一点点浇水、施肥。我期待着它长成参天大树的那一天。<br>共进，互勉。</p>]]></content>
    
    <summary type="html">
    
      简单的博客历程
    
    </summary>
    
    
      <category term="hello" scheme="http://bbxren.top/tags/hello/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我是王文徽</title>
  
  <subtitle>我相信皮格马利翁效应</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bbxren.site/"/>
  <updated>2020-01-21T14:33:03.774Z</updated>
  <id>http://bbxren.site/</id>
  
  <author>
    <name>Bbxren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分查找</title>
    <link href="http://bbxren.site/2020/01/20/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>http://bbxren.site/2020/01/20/算法/二分法/</id>
    <published>2020-01-20T11:49:04.000Z</published>
    <updated>2020-01-21T14:33:03.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>比如你要查一个以P打头的通讯录用户，或者R开头的单词，都更适合从中间查找，这种算法就是二分查找。其输入是一个<strong>有序</strong>的元素列表，查找元素包含在列表中，返回该位置，否则返回null。<br>如果列表包含100个元素，简单查找最多需要100次，二分查找最多只需要7次；如果列表包含40亿个数字，二分查找最多只需要32次，即运行时间为<em>对数时间（log时间）</em>。</p><h2 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h2><p>指出了算法的速度<br>一些常见的大O运行时间：</p><ul><li>O(log n)，也叫对数时间，这样的算法包括二分查找。</li><li>O(n)，也叫线性时间，这样的算法包括简单查找。</li><li>O(n * log n)，这样的算法包括快速排序。</li><li>O(n²)，选择排序，速度较慢。</li><li>O(n!)，例如旅行商问题。<h2 id="简明代码"><a href="#简明代码" class="headerlink" title="简明代码"></a>简明代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> len[],<span class="keyword">int</span> target,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"><span class="title">while</span><span class="params">(low &lt;= high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = low + (high-low) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (target == len[mid])&#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; len[mid])</span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>二分法思想简单，数据量大时算法加速提升速度快，要求待查数据已被整理为有序列表。</p><h2 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h2><ol><li>数据范围：整型范围为-2³¹～2³¹-1，二分查找时如果使用<br><code>int mid = (high + low) / 2;</code><br>对于较大的low和high可能相加后超过范围，因此使用<br><code>int mid = low + (high-low) / 2;</code> </li><li>边界确定。<br>边界确定关系到二分查找算法的赋值与判断。如<code>high &gt; low</code>还是<code>high &gt;= low</code>，<code>high = mid</code>还是 <code>high = mid - 1</code><br>还有high的初值是n还是n-1(n指元素个数)，一旦错误，会导致死循环或者返回错误的情况，应该保持统一的开闭区间，比如high初值为n时，是左闭右开区间[low,high),取子序列也应该是左闭右开区间，<code>while( low&lt; high)</code>，以及<code>high = mid;</code>,子区间序列为[low,mid)，当high初始值为n-1，则与示例代码相同，子区间为[low,mid-1]。<br>3.二分查找的变形，现实问题大多是二分查找的变形，不会是简单的基础模型，例如查找重复出现的元素第一次/最后一次出现的位置，返回小于（大于）或等于目标元素的最大（小）元素等，针对不同问题修改相应的判断和赋值语句，需要注意以下几点：<ul><li>注意high和low的赋值，保证目标元素必然不在排除序列中。</li><li>每次二分过程注意low和high的赋值和循环条件判断，保证不会出现死循环，即要么排除元素序列减少，要么结束循环。</li><li>退出循环时，分析此时目标元素形态，确定返回位置的正确表达形式。<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="方程求解（POJ-4140）"><a href="#方程求解（POJ-4140）" class="headerlink" title="方程求解（POJ 4140）"></a>方程求解（POJ 4140）</h3><strong>问题描述</strong><br>求下面方程的根：f(x) = x³- 5x²+ 10x - 80 = 0。<br><strong>输出要求</strong><br>精确到小数点后9位。<br><strong>输出样例</strong><br>5.705085930</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">double</span> low, <span class="keyword">double</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> mid;</span><br><span class="line"><span class="keyword">double</span> f;</span><br><span class="line"><span class="keyword">while</span> (high - low &gt; <span class="number">0.00000000001</span>) <span class="comment">//精度</span></span><br><span class="line">&#123;</span><br><span class="line">mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">f = mid * mid * mid - <span class="number">5</span> * mid * mid + <span class="number">10</span> * mid - <span class="number">80</span>;</span><br><span class="line"><span class="keyword">if</span> (f &lt; <span class="number">0</span>)</span><br><span class="line">low = mid;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">high = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.9lf\n"</span>,BinarySearch(<span class="number">0.0</span>,<span class="number">10.0</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在线翻译（POJ-2530）"><a href="#在线翻译（POJ-2530）" class="headerlink" title="在线翻译（POJ 2530）"></a>在线翻译（POJ 2530）</h3><p><strong>问题描述</strong><br>You have just moved from Waterloo to a big city. The people here speak an incomprehensible dialect of a foreign language. Fortunately, you have a dictionary to help you understand them.<br>输入<br>Input consists of up to 100,000 dictionary entries, followed by a blank line, followed by a message of up to 100,000 words. Each dictionary entry is a line containing an English word, followed by a space and a foreign language word. No foreign word appears more than once in the dictionary. The message is a sequence of words in the foreign language, one word on each line. Each word in the input is a sequence of at most 10 lowercase letters.<br><strong>输出要求</strong><br>Output is the message translated to English, one word per line. Foreign words not in the dictionary should be translated as “eh”.<br><strong>样例输入</strong><br>dog ogday<br>cat atcay<br>pig igpay<br>froot ootfray<br>loops oopslay</p><p>atcay<br>ittenkay<br>oopslay<br><strong>样例输出</strong><br>cat<br>eh<br>loops</p><p><strong>思路</strong><br>由于查找量大，最多可能有100000个，故采用二分法查找词条，这里要注意的是查找的内容为字符串，定义cmp()函数进行排序（sort函数的排序规则），字符串大小比较要用到strcmp()函数，strcmp(a,b)返回小于0的值表示a&lt;b。<br>还要注意输入格式的问题，即如何准确发现空行，可以使用cin.peek()探查输入流的下一个字符。若为换行，结束输入，转入翻译阶段，同时使用cin.peek()前要使用cin.get()处理掉行末换行符,同时排序部分用到了algorithm标准函数库里的sort函数，从网上了解到，sort函数使用的排序方法是类似于快排的方法，时间复杂度为n*log2(n)，执行效率较高！有关sort函数的用法，我参考了<a href="https://blog.csdn.net/liuzuyi200/article/details/8974326" target="_blank" rel="noopener">这篇文章</a>sort函数有三个参数：（1）第一个是要排序的数组的起始地址。（2）第二个是结束的地址（最后一位要排序的地址）（3）第三个参数是排序的方法，可以是从大到小也可是从小到大，还可以不写第三个参数，此时默认的排序方法是从小到大排序。<br>Sort函数使用模板:<code>Sort(start,end,排序方法)</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Entry</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> english[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">char</span> foreign[<span class="number">11</span>];</span><br><span class="line">&#125;entries[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cmp</span><span class="params">(Entry entry1,Entry entry2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(entry1.foreign, entry2.foreign) &lt; <span class="number">0</span>; <span class="comment">//将字典里的foreign从小到大排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> target[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, entries[num].english,entries[num].foreign);</span><br><span class="line">num++;</span><br><span class="line"><span class="built_in">cin</span>.get();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cin</span>.peek() == <span class="string">'\n'</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(entries, entries + num, Cmp);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>,target) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = num;</span><br><span class="line"><span class="keyword">while</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = low + (high + low) / <span class="number">2</span>;</span><br><span class="line">n = <span class="built_in">strcmp</span>(entries[mid].foreign, target);</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">low = mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">high = mid;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, entries[mid].english);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n)<span class="built_in">printf</span>(<span class="string">"en\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="算法" scheme="http://bbxren.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Algorithm" scheme="http://bbxren.site/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>给博客通过CDN实现访问加速？——Cloudflare</title>
    <link href="http://bbxren.site/2019/12/31/%E5%8D%9A%E5%AE%A2/%E7%BB%99%E5%8D%9A%E5%AE%A2%E9%80%9A%E8%BF%87CDN%E5%AE%9E%E7%8E%B0%E8%AE%BF%E9%97%AE%E5%8A%A0%E9%80%9F%EF%BC%9F%E2%80%94%E2%80%94Cloudflare/"/>
    <id>http://bbxren.site/2019/12/31/博客/给博客通过CDN实现访问加速？——Cloudflare/</id>
    <published>2019-12-31T15:26:18.000Z</published>
    <updated>2020-06-24T09:12:43.493Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="给博客通过CDN实现访问加速？——Cloudflare"><a href="#给博客通过CDN实现访问加速？——Cloudflare" class="headerlink" title="给博客通过CDN实现访问加速？——Cloudflare"></a>给博客通过CDN实现访问加速？——Cloudflare</h3><p><strong><a href="https://baike.baidu.com/item/CDN" target="_blank" rel="noopener">CDN</a></strong>的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。<em>就跟物流中心一样，哪里离你近就给你从哪发货。</em></p><p><strong>Cloudflare</strong> 以向客户提供网站安全管理、性能优化及相关的技术支持为主要业务。提供包括CDN、优化工具、安全、分析以及应用等服务。并且与百度有合作，国内部署有大量的节点，以及处理 GitHub Pages 的问题。</p><ol><li><p>注册账号</p></li><li><p>注册好后点击 <code>Add site</code>添加域名</p><p><em>这里我遇到了提示域名未注册的问题导致无法添加，经过测试是DNS解析的问题，我把记录值从域名变成A类型的IP地址得以解决</em></p></li><li><p>等待解析完成后<code>continue</code></p></li><li><p><img alt="" data-src="https://upload.cc/i1/2019/12/31/UnW943.png" class="lazyload"></p></li></ol><p>然后他会让你修改DNS服务器，我的是阿里云域名控制台，阿里云的DNS服务器修改如图，修改完成，等待一段时间后生效。<em>bbxren.site is now queued up to be re-checked. Please check back in a few hours. You’ll also be notified by email once your site becomes active.</em></p><p><img alt="" data-src="https://upload.cc/i1/2019/12/31/zkpNBi.png" class="lazyload"></p><p>你也可以通过<a href="https://lookup.icann.org/lookup" target="_blank" rel="noopener">WHOIS</a>查看自己的网站信息判断是否修改成功。</p><p>（不过这个方案可能GG了）</p><p>whois之后我又发现好像这两篇文章的博主并没有用Cloudflare（？？？），另一个使用了的速度和gitpages没什么区别（可能是因为内陆节点的问题），不过解决了百度抓取的问题，还有考虑到浏览器缓存问题，等我的DNS服务器check完后会再进一步测试，至于部署到coding，gitee等其他方案等因为不稳定原因直接pass了，可能会考虑jsDelivr或者备案后打包到七牛吧。</p><p>还有就是hexo的编译速度可能会出现变慢的情况，后续（审美疲劳）的时候会考虑换成<em>Hugo，据说是目前世界第一快的（滑稽），由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署</em>。</p><p>然后最近会解决考虑安全性下多台电脑和手机编写博客的问题。</p><p><a href="https://tding.top/archives/12c6c559.html" target="_blank" rel="noopener">参考文章1</a></p><p><a href="https://www.imhunk.com/cloudflare-tutorials/" target="_blank" rel="noopener">参考文章2</a></p><p><a href="https://mogeko.me/2019/056/" target="_blank" rel="noopener">使用了cloudflare的博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客" scheme="http://bbxren.site/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="CDN" scheme="http://bbxren.site/tags/CDN/"/>
    
  </entry>
  
</feed>
